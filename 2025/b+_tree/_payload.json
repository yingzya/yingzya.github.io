[{"data":1,"prerenderedAt":1487},["ShallowReactive",2],{"/2025/b+_tree":3,"surround-/2025/b+_tree":1481},{"id":4,"title":5,"body":6,"categories":1460,"date":1462,"description":1463,"draft":1464,"extension":1465,"image":1466,"meta":1467,"navigation":1468,"path":1469,"readingTime":1470,"recommend":1466,"references":1466,"seo":1475,"sitemap":1476,"stem":1477,"tags":1478,"type":1466,"updated":1462,"url":1466,"__hash__":1480},"content/posts/2025/B+_tree.md","B树与B+树",{"type":7,"value":8,"toc":1443},"minimark",[9,14,25,33,36,53,56,59,62,68,74,77,91,388,392,507,510,513,757,760,766,772,782,792,796,807,814,825,831,834,847,850,856,859,865,876,879,990,993,996,1001,1012,1015,1018,1029,1032,1044,1047,1050,1065,1068,1074,1080,1086,1102,1105,1111,1131,1139,1173,1176,1235,1349,1352,1381,1386,1393],[10,11,13],"h3",{"id":12},"b树","B树",[15,16,17,18],"p",{},"参考的视频为",[19,20,24],"a",{"href":21,"rel":22},"https://www.bilibili.com/video/BV1tJ4m1w7yR/?spm_id_from=333.337.search-card.all.click&vd_source=926559b5444a073a9a6635cc350e8504",[23],"nofollow","B树(B-树) - 来由, 定义, 插入, 构建",[15,26,27,28,32],{},"也是一种平衡搜索树，其是一种",[29,30,31],"strong",{},"多叉平衡搜索树","。",[15,34,35],{},"硬盘读取物理地址连续的多个字节和读取单个字节耗时几乎没有区别。",[15,37,38,41,42,45,46,41,49,52],{},[29,39,40],{},"访问结点","是在",[29,43,44],{},"硬盘","上进行的，",[29,47,48],{},"结点内的数据操作",[29,50,51],{},"内存","中进行的。",[15,54,55],{},"包含数据的结点称为内部结点，下面的空结点称为外部结点(失败结点)，它们并不带任何信息，只是意味着查找失败，也叫失败结点。",[15,57,58],{},"称呼内部结点的最后一层为叶子结点。",[15,60,61],{},"B树要满足三个特性：平衡、有序、多路",[15,63,64,67],{},[29,65,66],{},"平衡","：B树所有的叶子结点一定在同一层",[15,69,70,73],{},[29,71,72],{},"有序","：结点内有序，任一元素的左子树都小于它，右子树都大于它。",[15,75,76],{},"对于m阶B树的结点：",[15,78,79,82,83,86,87,90],{},[29,80,81],{},"最多","：",[29,84,85],{},"m","个分支，",[29,88,89],{},"m-1","个元素",[15,92,93,96,97,251,252,90],{},[29,94,95],{},"最少","：根结点：2个分支，1个元素. 其它结点：有",[98,99,102,139],"span",{"className":100},[101],"katex",[98,103,106],{"className":104},[105],"katex-mathml",[107,108,110],"math",{"xmlns":109},"http://www.w3.org/1998/Math/MathML",[111,112,113,134],"semantics",{},[114,115,116,121,131],"mrow",{},[117,118,120],"mo",{"stretchy":119},"false","⌈",[122,123,124,127],"mfrac",{},[125,126,85],"mi",{},[128,129,130],"mn",{},"2",[117,132,133],{"stretchy":119},"⌉",[135,136,138],"annotation",{"encoding":137},"application/x-tex","\\lceil \\frac{m}{2} \\rceil",[98,140,144],{"className":141,"ariaHidden":143},[142],"katex-html","true",[98,145,148,153,157,248],{"className":146},[147],"base",[98,149],{"className":150,"style":152},[151],"strut","height:1.095em;vertical-align:-0.345em;",[98,154,120],{"className":155},[156],"mopen",[98,158,161,165,244],{"className":159},[160],"mord",[98,162],{"className":163},[156,164],"nulldelimiter",[98,166,168],{"className":167},[122],[98,169,173,235],{"className":170},[171,172],"vlist-t","vlist-t2",[98,174,177,230],{"className":175},[176],"vlist-r",[98,178,182,203,214],{"className":179,"style":181},[180],"vlist","height:0.6954em;",[98,183,185,190],{"style":184},"top:-2.655em;",[98,186],{"className":187,"style":189},[188],"pstrut","height:3em;",[98,191,197],{"className":192},[193,194,195,196],"sizing","reset-size6","size3","mtight",[98,198,200],{"className":199},[160,196],[98,201,130],{"className":202},[160,196],[98,204,206,209],{"style":205},"top:-3.23em;",[98,207],{"className":208,"style":189},[188],[98,210],{"className":211,"style":213},[212],"frac-line","border-bottom-width:0.04em;",[98,215,217,220],{"style":216},"top:-3.394em;",[98,218],{"className":219,"style":189},[188],[98,221,223],{"className":222},[193,194,195,196],[98,224,226],{"className":225},[160,196],[98,227,85],{"className":228},[160,229,196],"mathnormal",[98,231,234],{"className":232},[233],"vlist-s","​",[98,236,238],{"className":237},[176],[98,239,242],{"className":240,"style":241},[180],"height:0.345em;",[98,243],{},[98,245],{"className":246},[247,164],"mclose",[98,249,133],{"className":250},[247]," 个分支，",[98,253,255,283],{"className":254},[101],[98,256,258],{"className":257},[105],[107,259,260],{"xmlns":109},[111,261,262,280],{},[114,263,264,266,272,274,277],{},[117,265,120],{"stretchy":119},[122,267,268,270],{},[125,269,85],{},[128,271,130],{},[117,273,133],{"stretchy":119},[117,275,276],{},"−",[128,278,279],{},"1",[135,281,282],{"encoding":137},"\\lceil \\frac{m}{2} \\rceil - 1",[98,284,286,378],{"className":285,"ariaHidden":143},[142],[98,287,289,292,295,363,366,371,375],{"className":288},[147],[98,290],{"className":291,"style":152},[151],[98,293,120],{"className":294},[156],[98,296,298,301,360],{"className":297},[160],[98,299],{"className":300},[156,164],[98,302,304],{"className":303},[122],[98,305,307,352],{"className":306},[171,172],[98,308,310,349],{"className":309},[176],[98,311,313,327,335],{"className":312,"style":181},[180],[98,314,315,318],{"style":184},[98,316],{"className":317,"style":189},[188],[98,319,321],{"className":320},[193,194,195,196],[98,322,324],{"className":323},[160,196],[98,325,130],{"className":326},[160,196],[98,328,329,332],{"style":205},[98,330],{"className":331,"style":189},[188],[98,333],{"className":334,"style":213},[212],[98,336,337,340],{"style":216},[98,338],{"className":339,"style":189},[188],[98,341,343],{"className":342},[193,194,195,196],[98,344,346],{"className":345},[160,196],[98,347,85],{"className":348},[160,229,196],[98,350,234],{"className":351},[233],[98,353,355],{"className":354},[176],[98,356,358],{"className":357,"style":241},[180],[98,359],{},[98,361],{"className":362},[247,164],[98,364,133],{"className":365},[247],[98,367],{"className":368,"style":370},[369],"mspace","margin-right:0.2222em;",[98,372,276],{"className":373},[374],"mbin",[98,376],{"className":377,"style":370},[369],[98,379,381,385],{"className":380},[147],[98,382],{"className":383,"style":384},[151],"height:0.6444em;",[98,386,279],{"className":387},[160],[389,390,391],"h4",{"id":391},"插入",[15,393,394,395,398,399,506],{},"先查找到插入的位置进行插入(",[29,396,397],{},"插入位置一定在叶结点",")。如果没有出现上溢出，无需调整，否则中间元素(第",[98,400,402,423],{"className":401},[101],[98,403,405],{"className":404},[105],[107,406,407],{"xmlns":109},[111,408,409,421],{},[114,410,411,413,419],{},[117,412,120],{"stretchy":119},[122,414,415,417],{},[125,416,85],{},[128,418,130],{},[117,420,133],{"stretchy":119},[135,422,138],{"encoding":137},[98,424,426],{"className":425,"ariaHidden":143},[142],[98,427,429,432,435,503],{"className":428},[147],[98,430],{"className":431,"style":152},[151],[98,433,120],{"className":434},[156],[98,436,438,441,500],{"className":437},[160],[98,439],{"className":440},[156,164],[98,442,444],{"className":443},[122],[98,445,447,492],{"className":446},[171,172],[98,448,450,489],{"className":449},[176],[98,451,453,467,475],{"className":452,"style":181},[180],[98,454,455,458],{"style":184},[98,456],{"className":457,"style":189},[188],[98,459,461],{"className":460},[193,194,195,196],[98,462,464],{"className":463},[160,196],[98,465,130],{"className":466},[160,196],[98,468,469,472],{"style":205},[98,470],{"className":471,"style":189},[188],[98,473],{"className":474,"style":213},[212],[98,476,477,480],{"style":216},[98,478],{"className":479,"style":189},[188],[98,481,483],{"className":482},[193,194,195,196],[98,484,486],{"className":485},[160,196],[98,487,85],{"className":488},[160,229,196],[98,490,234],{"className":491},[233],[98,493,495],{"className":494},[176],[98,496,498],{"className":497,"style":241},[180],[98,499],{},[98,501],{"className":502},[247,164],[98,504,133],{"className":505},[247]," 个 )上移，两边分裂(直到没有上溢出为止)",[389,508,509],{"id":509},"构建",[15,511,512],{},"依次对每个元素进行插入操作",[15,514,515,516,518,519,626,627,756],{},"m 阶 B 树的结点",[29,517,95],{},"有：根结点：有 2 个分支，包含 1 个元素； 其他结点：有 ",[98,520,522,543],{"className":521},[101],[98,523,525],{"className":524},[105],[107,526,527],{"xmlns":109},[111,528,529,541],{},[114,530,531,533,539],{},[117,532,120],{"stretchy":119},[122,534,535,537],{},[125,536,85],{},[128,538,130],{},[117,540,133],{"stretchy":119},[135,542,138],{"encoding":137},[98,544,546],{"className":545,"ariaHidden":143},[142],[98,547,549,552,555,623],{"className":548},[147],[98,550],{"className":551,"style":152},[151],[98,553,120],{"className":554},[156],[98,556,558,561,620],{"className":557},[160],[98,559],{"className":560},[156,164],[98,562,564],{"className":563},[122],[98,565,567,612],{"className":566},[171,172],[98,568,570,609],{"className":569},[176],[98,571,573,587,595],{"className":572,"style":181},[180],[98,574,575,578],{"style":184},[98,576],{"className":577,"style":189},[188],[98,579,581],{"className":580},[193,194,195,196],[98,582,584],{"className":583},[160,196],[98,585,130],{"className":586},[160,196],[98,588,589,592],{"style":205},[98,590],{"className":591,"style":189},[188],[98,593],{"className":594,"style":213},[212],[98,596,597,600],{"style":216},[98,598],{"className":599,"style":189},[188],[98,601,603],{"className":602},[193,194,195,196],[98,604,606],{"className":605},[160,196],[98,607,85],{"className":608},[160,229,196],[98,610,234],{"className":611},[233],[98,613,615],{"className":614},[176],[98,616,618],{"className":617,"style":241},[180],[98,619],{},[98,621],{"className":622},[247,164],[98,624,133],{"className":625},[247]," 个分支，包含 ",[98,628,630,655],{"className":629},[101],[98,631,633],{"className":632},[105],[107,634,635],{"xmlns":109},[111,636,637,653],{},[114,638,639,641,647,649,651],{},[117,640,120],{"stretchy":119},[122,642,643,645],{},[125,644,85],{},[128,646,130],{},[117,648,133],{"stretchy":119},[117,650,276],{},[128,652,279],{},[135,654,282],{"encoding":137},[98,656,658,747],{"className":657,"ariaHidden":143},[142],[98,659,661,664,667,735,738,741,744],{"className":660},[147],[98,662],{"className":663,"style":152},[151],[98,665,120],{"className":666},[156],[98,668,670,673,732],{"className":669},[160],[98,671],{"className":672},[156,164],[98,674,676],{"className":675},[122],[98,677,679,724],{"className":678},[171,172],[98,680,682,721],{"className":681},[176],[98,683,685,699,707],{"className":684,"style":181},[180],[98,686,687,690],{"style":184},[98,688],{"className":689,"style":189},[188],[98,691,693],{"className":692},[193,194,195,196],[98,694,696],{"className":695},[160,196],[98,697,130],{"className":698},[160,196],[98,700,701,704],{"style":205},[98,702],{"className":703,"style":189},[188],[98,705],{"className":706,"style":213},[212],[98,708,709,712],{"style":216},[98,710],{"className":711,"style":189},[188],[98,713,715],{"className":714},[193,194,195,196],[98,716,718],{"className":717},[160,196],[98,719,85],{"className":720},[160,229,196],[98,722,234],{"className":723},[233],[98,725,727],{"className":726},[176],[98,728,730],{"className":729,"style":241},[180],[98,731],{},[98,733],{"className":734},[247,164],[98,736,133],{"className":737},[247],[98,739],{"className":740,"style":370},[369],[98,742,276],{"className":743},[374],[98,745],{"className":746,"style":370},[369],[98,748,750,753],{"className":749},[147],[98,751],{"className":752,"style":384},[151],[98,754,279],{"className":755},[160]," 个元素。",[389,758,759],{"id":759},"删除",[15,761,762,763],{},"删除非叶结点元素最终都转换成删除",[29,764,765],{},"叶结点元素",[15,767,768,769,32],{},"叶结点元素：没有下溢的话，",[29,770,771],{},"无需调整",[15,773,774,775,778,779,781],{},"下溢出话，要",[29,776,777],{},"借","结点，但是注意，B树",[29,780,72],{},"的性质不能被破坏。父下来，兄上去。",[15,783,784,787,788,791],{},[29,785,786],{},"兄弟","结点",[29,789,790],{},"不够借","的话：将其与兄弟结点合并(左右结点都可以，步骤都是父下来，兄弟结点上去)。然后对父结点检查是否其出现了下溢出。",[10,793,795],{"id":794},"b树-1","B+树",[15,797,798,799,802,803,806],{},"其常被广泛用作",[29,800,801],{},"数据库","的",[29,804,805],{},"索引","结构，其本身就是一个多级的索引结构，能够加快查询速度",[15,808,809,810,813],{},"叶结点层",[29,811,812],{},"包含所有元素","，从小到大链接起来，通过第一个结点前的头指针",[15,815,816,818,819,821,822],{},[29,817,85],{},"个分支的结点有",[29,820,85],{},"个元素，每个元素",[29,823,824],{},"对应子结点最大值",[15,826,827],{},[828,829],"img",{"alt":795,"src":830},"https://video.yangzy.top/picgo/B%2B.png",[389,832,833],{"id":833},"查找",[15,835,836,837,840,841,840,844,833],{},"B+树支持多种查找操作。比如：",[29,838,839],{},"顺序","查找、",[29,842,843],{},"随机",[29,845,846],{},"范围",[389,848,849],{"id":849},"特点",[15,851,852,853],{},"1、",[29,854,855],{},"缓存命中率高",[15,857,858],{},"B+树的结点通常较胖，一个结点内可以存放多个元素。让一个结点的大小尽量接近一个CPU Cache，这样当一个结点加载进缓存时，就能够获得较多信息。相比之下，红黑树是二叉树，结点瘦高，在内存中分布较为零散，访问时需要更多指针跳转。因此其缓存命中率更高。",[15,860,861,862],{},"2、",[29,863,864],{},"范围查询的绝对优势",[15,866,867,868,871,872,875],{},"B+树的所有数据都存在叶子结点上，并且叶子结点之间通过一个双向链表连接，当执行查找操作时，只需要在树上定位到起始的数据，然后可以像",[29,869,870],{},"遍历链表","一样，在叶子结点进行",[29,873,874],{},"水平","遍历，这种方式非常高效。而红黑树需要进行复杂的中序遍历，访问轨迹是上下跳跃的，效率远不如B+树。",[389,877,878],{"id":878},"插入与删除",[15,880,881,882,989],{},"当一个插入操作导致某个结点的元素满了之后，执行分裂操作，中间元素(第",[98,883,885,906],{"className":884},[101],[98,886,888],{"className":887},[105],[107,889,890],{"xmlns":109},[111,891,892,904],{},[114,893,894,896,902],{},[117,895,120],{"stretchy":119},[122,897,898,900],{},[125,899,85],{},[128,901,130],{},[117,903,133],{"stretchy":119},[135,905,138],{"encoding":137},[98,907,909],{"className":908,"ariaHidden":143},[142],[98,910,912,915,918,986],{"className":911},[147],[98,913],{"className":914,"style":152},[151],[98,916,120],{"className":917},[156],[98,919,921,924,983],{"className":920},[160],[98,922],{"className":923},[156,164],[98,925,927],{"className":926},[122],[98,928,930,975],{"className":929},[171,172],[98,931,933,972],{"className":932},[176],[98,934,936,950,958],{"className":935,"style":181},[180],[98,937,938,941],{"style":184},[98,939],{"className":940,"style":189},[188],[98,942,944],{"className":943},[193,194,195,196],[98,945,947],{"className":946},[160,196],[98,948,130],{"className":949},[160,196],[98,951,952,955],{"style":205},[98,953],{"className":954,"style":189},[188],[98,956],{"className":957,"style":213},[212],[98,959,960,963],{"style":216},[98,961],{"className":962,"style":189},[188],[98,964,966],{"className":965},[193,194,195,196],[98,967,969],{"className":968},[160,196],[98,970,85],{"className":971},[160,229,196],[98,973,234],{"className":974},[233],[98,976,978],{"className":977},[176],[98,979,981],{"className":980,"style":241},[180],[98,982],{},[98,984],{"className":985},[247,164],[98,987,133],{"className":988},[247]," 个 )上移，两边分裂(直到没有上溢出为止)，后面就是递归了",[15,991,992],{},"删除操作，当删除一个元素导致结点下溢出时，检查兄弟结点是否能借结点，但是要保持B+树的有序性质。父亲下来，兄弟结点上去。",[15,994,995],{},"兄弟不够借，就将其与兄弟结点合并(左右结点都可以)，然后对父结点检查其是否出现了下溢出。",[15,997,998,82],{},[29,999,1000],{},"插入顺序",[15,1002,1003,1004,1007,1008,1011],{},"插入的操作是",[29,1005,1006],{},"先写B+树","，",[29,1009,1010],{},"再写哈希表","。B+树是数据存储的本体。如果B+树写入失败，返回错误。哈希表不会被污染。如果B+树成功，而哈希表失败。虽然会产生一个无法通过哈希表索引到的“幽灵数据”，但这比哈希表里有一个指针指向一个不存在的数据要好处理。",[389,1013,1014],{"id":1014},"数据一致性",[15,1016,1017],{},"比如：数据在B+树里写入成功了，但写入哈希表时失败了（比如内存分配失败），这时数据不一致了怎么办？",[15,1019,1020,1021,1024,1025,1028],{},"通过固定的写入顺序来",[29,1022,1023],{},"降低","不一致的风险。在工业级的系统中，这个问题通常会通过",[29,1026,1027],{},"预写日志","（Write-Ahead Logging, WAL）来保证原子性，但我这个项目还没有实现这么复杂的机制",[15,1030,1031],{},"哈希表里存的指针直接指向B+树叶子结点中value的内存地址。当B+树结点分裂，导致数据被拷贝到新结点时，原有的指针确实会失效。",[15,1033,1034,1035,1043],{},"解决方法：在节点分裂或合并，即",[29,1036,1037,1038,1042],{},"数据位置发生移动时，我需要拿到被移动数据的",[1039,1040,1041],"code",{"code":1041},"key","，然后去更新哈希表中对应的指针，让它指向新的内存地址","。这确实给分裂合并操作增加了一点复杂度，但这是保证整个混合索引架构正确工作的必要步骤。",[389,1045,1046],{"id":1046},"并发与性能",[15,1048,1049],{},"1、 你这个锁的粒度是多大的？是只有一个全局的锁来保护整个引擎，还是说你对数据结构做了更细粒度的锁定？",[15,1051,1052,1053,1056,1057,1060,1061,1064],{},"采用一个",[29,1054,1055],{},"全局的读写锁","来保护整个存储引擎。一次写操作（如 ",[1039,1058,1059],{"code":1059},"Put"," 或 ",[1039,1062,1063],{"code":1063},"Delete","）需要同时修改哈希表和 B+树。如果采用细粒度锁（比如锁住单个 B+树节点），就需要设计一套非常复杂的锁协议来保证对两个数据结构修改的原子性，这会大大增加实现的难度和出错的风险。",[15,1066,1067],{},"2、 为什么选择读写锁，而不是更简单的互斥锁（Mutex）？在什么样的业务场景下，读写锁的优势才能最大化体现？",[15,1069,1070,1071,32],{},"为了",[29,1072,1073],{},"提升并发读取的性能",[15,1075,1076,1079],{},[29,1077,1078],{},"互斥锁 (Mutex)","：任何时候只允许一个线程进入临界区，无论这个线程是读还是写。如果一个线程在读，其他所有线程（包括读和写）都必须等待。",[15,1081,1082,1085],{},[29,1083,1084],{},"读写锁 (Shared Mutex)","：它区分了“读操作”和“写操作”。规则是：",[1087,1088,1089,1096],"ul",{},[1090,1091,1092,1095],"li",{},[29,1093,1094],{},"读锁共享","：多个线程可以同时持有读锁，并发地进行读取，互不影响。",[1090,1097,1098,1101],{},[29,1099,1100],{},"写锁独占","：写锁是排他的。当一个线程持有写锁时，其他任何线程（无论读写）都不能获取锁。反之，当任何线程持有读锁时，写线程也必须等待。",[15,1103,1104],{},"3、在你当前的锁机制下，如果一个线程正在执行写操作（比如 Put），此时大量的读请求（Get）过来会怎么样？它们是都会被阻塞吗？",[15,1106,1107,1110],{},[29,1108,1109],{},"它们都会被阻塞","。整个过程是这样的：",[1112,1113,1114,1126],"ol",{},[1090,1115,1116,1119,1120,1122,1123,32],{},[29,1117,1118],{},"写线程请求锁","：一个执行 ",[1039,1121,1059],{"code":1059}," 操作的线程请求获取",[29,1124,1125],{},"独占的写锁",[1090,1127,1128,82],{},[29,1129,1130],{},"获取写锁",[1087,1132,1133,1136],{},[1090,1134,1135],{},"如果当前没有任何线程持有锁，该写线程会立即获得写锁。",[1090,1137,1138],{},"如果当前有其他读线程正在读取，该写线程会等待，直到所有读线程都释放了读锁。",[1112,1140,1142,1151,1167],{"start":1141},3,[1090,1143,1144,1147,1148,32],{},[29,1145,1146],{},"写操作期间","：一旦写线程成功获得了写锁，它就开始修改数据结构（哈希表和B+树）。在此期间，这个写锁是",[29,1149,1150],{},"独占的",[1090,1152,1153,1156,1157,1160,1161,1163,1164,32],{},[29,1154,1155],{},"新请求到达","：此时，无论来的是读请求（",[1039,1158,1159],{"code":1159},"Get","）还是新的写请求（",[1039,1162,1059],{"code":1059},"），当它们尝试获取锁时（读请求尝试获取共享读锁，写请求尝试获取独占写锁），都会发现锁已经被一个写线程持有。因此，",[29,1165,1166],{},"所有这些新来的请求都会进入等待队列，被阻塞",[1090,1168,1169,1172],{},[29,1170,1171],{},"写操作完成","：写线程完成操作后，释放写锁。然后，系统会根据具体的调度策略（通常是公平或读者优先/写者优先）唤醒等待队列中的线程。",[389,1174,1175],{"id":1175},"复杂度",[15,1177,1178,1227,1228,1231,1232,805],{},[98,1179,1181,1204],{"className":1180},[101],[98,1182,1184],{"className":1183},[105],[107,1185,1186],{"xmlns":109},[111,1187,1188,1201],{},[114,1189,1190,1193,1196,1198],{},[125,1191,1192],{},"O",[117,1194,1195],{"stretchy":119},"(",[128,1197,279],{},[117,1199,1200],{"stretchy":119},")",[135,1202,1203],{"encoding":137},"O(1)",[98,1205,1207],{"className":1206,"ariaHidden":143},[142],[98,1208,1210,1214,1218,1221,1224],{"className":1209},[147],[98,1211],{"className":1212,"style":1213},[151],"height:1em;vertical-align:-0.25em;",[98,1215,1192],{"className":1216,"style":1217},[160,229],"margin-right:0.02778em;",[98,1219,1195],{"className":1220},[156],[98,1222,279],{"className":1223},[160],[98,1225,1200],{"className":1226},[247],"的平均单点查询复杂度，完全得益于我们引入的“",[29,1229,1230],{},"哈希表","”作为",[29,1233,1234],{},"一级",[15,1236,1237,1238,1281,1282,1348],{},"平均单点查询复杂度为",[98,1239,1241,1260],{"className":1240},[101],[98,1242,1244],{"className":1243},[105],[107,1245,1246],{"xmlns":109},[111,1247,1248,1258],{},[114,1249,1250,1252,1254,1256],{},[125,1251,1192],{},[117,1253,1195],{"stretchy":119},[128,1255,279],{},[117,1257,1200],{"stretchy":119},[135,1259,1203],{"encoding":137},[98,1261,1263],{"className":1262,"ariaHidden":143},[142],[98,1264,1266,1269,1272,1275,1278],{"className":1265},[147],[98,1267],{"className":1268,"style":1213},[151],[98,1270,1192],{"className":1271,"style":1217},[160,229],[98,1273,1195],{"className":1274},[156],[98,1276,279],{"className":1277},[160],[98,1279,1200],{"className":1280},[247],"，如果只有B+树的话，",[98,1283,1285,1315],{"className":1284},[101],[98,1286,1288],{"className":1287},[105],[107,1289,1290],{"xmlns":109},[111,1291,1292,1312],{},[114,1293,1294,1296,1298,1301,1304,1307,1310],{},[125,1295,1192],{},[117,1297,1195],{"stretchy":119},[125,1299,1300],{},"l",[125,1302,1303],{},"o",[125,1305,1306],{},"g",[125,1308,1309],{},"N",[117,1311,1200],{"stretchy":119},[135,1313,1314],{"encoding":137},"O(log N)",[98,1316,1318],{"className":1317,"ariaHidden":143},[142],[98,1319,1321,1324,1327,1330,1334,1337,1341,1345],{"className":1320},[147],[98,1322],{"className":1323,"style":1213},[151],[98,1325,1192],{"className":1326,"style":1217},[160,229],[98,1328,1195],{"className":1329},[156],[98,1331,1300],{"className":1332,"style":1333},[160,229],"margin-right:0.01968em;",[98,1335,1303],{"className":1336},[160,229],[98,1338,1306],{"className":1339,"style":1340},[160,229],"margin-right:0.03588em;",[98,1342,1309],{"className":1343,"style":1344},[160,229],"margin-right:0.10903em;",[98,1346,1200],{"className":1347},[247]," 查询",[15,1350,1351],{},"流程是这样的：",[1112,1353,1354,1357,1363,1366,1372],{},[1090,1355,1356],{},"从 B+树的根节点开始。",[1090,1358,1359,1360,1362],{},"在当前节点中，通过比较 ",[1039,1361,1041],{"code":1041}," 的大小，确定下一步应该访问哪个子节点。",[1090,1364,1365],{},"沿着路径一直向下访问，经过一层层的非叶子节点（索引节点）。",[1090,1367,1368,1369,1371],{},"最终到达包含该 ",[1039,1370,1041],{"code":1041}," 的叶子节点。",[1090,1373,1374,1375,1377,1378,32],{},"在叶子节点内进行查找，找到 ",[1039,1376,1041],{"code":1041}," 对应的 ",[1039,1379,1380],{"code":1380},"value",[15,1382,1383],{},[29,1384,1385],{},"核心设计：哈希表里存的不是数据本身，而是指向 B+树叶子节点的“快捷指针”。",[15,1387,1388,1389,1392],{},"一次 ",[1039,1390,1391],{"code":1391},"Get(key)"," 的新流程如下：",[1112,1394,1395,1409,1415,1427,1437],{},[1090,1396,1397,1400,1401,1404,1405,1408],{},[29,1398,1399],{},"哈希计算 (O(1))","：当 ",[1039,1402,1403],{"code":1403},"Get(\"some_key\")"," 请求到达时，我们首先对 ",[1039,1406,1407],{"code":1407},"\"some_key\""," 使用哈希函数，计算出一个哈希值。这是一个常数时间操作。",[1090,1410,1411,1414],{},[29,1412,1413],{},"定位桶 (O(1))","：我们用这个哈希值对哈希表的数组大小取模，立即定位到哈希表中的一个特定位置（桶/bucket）。这也是一个常数时间操作。",[1090,1416,1417,1420,1421,32],{},[29,1418,1419],{},"获取指针 (O(1))","：在这个桶里，我们直接存储了一个指针。这个指针指向的，正是",[29,1422,1423,1424,1426],{},"B+树中存储着 ",[1039,1425,1407],{"code":1407}," 数据的那个叶子节点",[1090,1428,1429,1432,1433,1436],{},[29,1430,1431],{},"直接访问 (O(1))","：我们通过这个指针，",[29,1434,1435],{},"“跳过”了从 B+树根节点开始的层层遍历","，直接“瞬移”到目标叶子节点。",[1090,1438,1439,1442],{},[29,1440,1441],{},"节点内查找 (O(1))","：B+树的节点大小是固定的（通常是几个KB），在节点内部进行小范围的查找（如二分查找），其时间开销可以视为常数。",{"title":1444,"searchDepth":1445,"depth":1445,"links":1446},"",4,[1447,1452],{"id":12,"depth":1141,"text":13,"children":1448},[1449,1450,1451],{"id":391,"depth":1445,"text":391},{"id":509,"depth":1445,"text":509},{"id":759,"depth":1445,"text":759},{"id":794,"depth":1141,"text":795,"children":1453},[1454,1455,1456,1457,1458,1459],{"id":833,"depth":1445,"text":833},{"id":849,"depth":1445,"text":849},{"id":878,"depth":1445,"text":878},{"id":1014,"depth":1445,"text":1014},{"id":1046,"depth":1445,"text":1046},{"id":1175,"depth":1445,"text":1175},[1461],"复习","2025-09-15 20:00:06","B树和B+树是常用的多路平衡查找树，常用于数据库和文件系统索引。B树每个节点同时存放键和数据，而B+树的非叶子节点只存储键作为索引，所有数据则集中存储在叶子节点。这让B+树在范围查询和磁盘I/O方面更具优势，且更容易获得更高的缓存命中率。此外，文章还介绍了将哈希表与B+树结合以实现接近O(1)的平均查询速度",false,"md",null,{},true,"/2025/b+_tree",{"text":1471,"minutes":1472,"time":1473,"words":1474},"13 min read",12.615,756900,2523,{"title":5,"description":1463},{"loc":1469},"posts/2025/B+_tree",[1479],"数据结构","XiQpgno3uypsbzDuz183NslQoWz9cCVzVhA2UonjhCA",[1482,1466],{"title":1483,"path":1484,"stem":1485,"date":1486,"type":1466,"children":-1},"C++面向对象与YOLO目标检测","/2025/c++andyolo","posts/2025/c++andyolo","2025-09-07 18:48:51",1758973829056]