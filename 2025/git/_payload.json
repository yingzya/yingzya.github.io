[{"data":1,"prerenderedAt":602},["ShallowReactive",2],{"/2025/git":3,"surround-/2025/git":591},{"id":4,"title":5,"body":6,"categories":569,"date":571,"description":5,"draft":572,"extension":573,"image":574,"meta":575,"navigation":576,"path":577,"readingTime":578,"recommend":583,"references":583,"seo":584,"sitemap":585,"stem":586,"tags":587,"type":583,"updated":589,"url":583,"__hash__":590},"content/posts/2025/Git自动化部署.md","Git自动化部署",{"type":7,"value":8,"toc":546},"minimark",[9,13,18,29,40,44,47,52,58,66,72,75,86,94,101,107,114,120,124,130,134,144,154,160,195,198,205,208,219,223,226,229,235,262,267,292,298,301,304,310,316,324,327,332,338,341,346,353,356,361,383,388,419,423,429,433,439,444,459,464,470,474,480,484,491,496,502,515,522,527,530,535,538],[10,11,12],"p",{},"由于不想每次更新完博客再手动上传到服务器，于是在纸鹿和GPT的支持下，弄了一下自动化部署。",[14,15,17],"h2",{"id":16},"第1步服务器配置","第1步：服务器配置",[10,19,20,21,25,26],{},"✅ 安装 ",[22,23,24],"strong",{},"Node.js"," 和 ",[22,27,28],{},"pnpm",[30,31,37],"pre",{"className":32,"code":34,"language":35,"meta":36},[33],"language-bash","# 安装 Node.js\ncurl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -\nsudo apt install -y nodejs\n\n# 安装 pnpm\nnpm install -g pnpm\n","bash","",[38,39,34],"code",{"__ignoreMap":36},[14,41,43],{"id":42},"第2步部署-webhook-接收器nodejs-服务","第2步：部署 Webhook 接收器（NodeJS 服务）",[10,45,46],{},"我们用 Node 写一个 Webhook 接收服务（监听 GitHub 推送事件）:",[48,49,51],"h3",{"id":50},"_1在服务器建个目录","1、在服务器建个目录",[30,53,56],{"className":54,"code":55,"language":35,"meta":36},[33],"mkdir -p ~/webhook-server\ncd ~/webhook-server\n",[38,57,55],{"__ignoreMap":36},[48,59,61,62,65],{"id":60},"_2创建serverjs-文件","2、创建",[38,63,64],{"code":64},"server.js"," 文件：",[30,67,70],{"className":68,"code":69,"language":35,"meta":36},[33],"nano server.js\n",[38,71,69],{"__ignoreMap":36},[10,73,74],{},"粘贴以下内容（记得替换路径和仓库分支）：",[10,76,77,78,81,82,85],{},"记得",[22,79,80],{},"安全组","开放",[22,83,84],{},"6688","端口，也可以自己更换别的端口。同时服务器防火墙也要开放该端口",[30,87,92],{"className":88,"code":90,"language":91,"meta":36},[89],"language-js","const http = require('http');\nconst { exec } = require('child_process');\n\nconst secret = 'your_secret'; // 与 GitHub 中 Webhook 设置的 secret 一致\nconst PORT = 6688;// 可以自己改端口\n\nfunction verifySignature(req, body) {\n  // 可以添加签名校验，这里略去简化\n  return true;\n}\n\nconst server = http.createServer((req, res) => {\n  if (req.method === 'POST' && req.url === '/webhook') {\n    let body = '';\n    req.on('data', chunk => { body += chunk.toString(); });\n    req.on('end', () => {\n      if (!verifySignature(req, body)) {\n        res.writeHead(403);\n        res.end('Invalid signature');\n        return;\n      }\n\n      // 执行构建+部署\n      exec('sh ./deploy.sh', (err, stdout, stderr) => {\n        if (err) {\n          console.error(`执行错误: ${err.message}`);\n          return;\n        }\n        console.log(`输出: ${stdout}`);\n        console.error(`错误: ${stderr}`);\n      });\n\n      res.writeHead(200);\n      res.end('Webhook received and processing');\n    });\n  } else {\n    res.writeHead(404);\n    res.end();\n  }\n});\n\nserver.listen(PORT, () => {\n  console.log(`🚀 Webhook server running at http://localhost:${PORT}/webhook`);\n});\n\n","js",[38,93,90],{"__ignoreMap":36},[48,95,97,98],{"id":96},"_3创建部署脚本deploysh","3、创建部署脚本",[38,99,100],{"code":100},"deploy.sh",[30,102,105],{"className":103,"code":104,"language":35,"meta":36},[33],"nano deploy.sh\n",[38,106,104],{"__ignoreMap":36},[10,108,109,110,113],{},"内容如下(根据自己的",[22,111,112],{},"项目路径","调整)",[30,115,118],{"className":116,"code":117,"language":35,"meta":36},[33],"#!/bin/bash\n\necho \"🔄 开始部署...\"\n\ncd /home/qinyu/nuxt-blog || exit\n\n# 拉取最新代码\ngit reset --hard origin/main\ngit clean -fd\ngit pull origin main\n\n# 判断 package.json 是否有变化（缓存上一次的哈希）\nPACKAGE_HASH_FILE=\".package.hash\"\nCURRENT_HASH=$(md5sum package.json | awk '{print $1}')\n\nif [ -f \"$PACKAGE_HASH_FILE\" ]; then\n    LAST_HASH=$(cat \"$PACKAGE_HASH_FILE\")\nelse\n    LAST_HASH=\"\"\nfi\n\nif [ \"$CURRENT_HASH\" != \"$LAST_HASH\" ]; then\n    echo \"📦 package.json 发生变化，执行 pnpm install...\"\n    pnpm install\n    echo \"$CURRENT_HASH\" > \"$PACKAGE_HASH_FILE\"\nelse\n    echo \"✅ package.json 未变化，跳过 pnpm install\"\nfi\n\n# 构建项目\necho \"⚙️ 开始构建项目...\"\npnpm build\n\n# 拷贝生成的文件到目标目录\necho \"🚚 拷贝到网站根目录...\"\nrm -rf /www/wwwroot/yingzya.top/*\ncp -r .output/public/* /www/wwwroot/yingzya.top/\n\necho \"✅ 部署完成\"\n",[38,119,117],{"__ignoreMap":36},[48,121,123],{"id":122},"_4启动服务pm2防挂","4、启动服务(pm2防挂)",[30,125,128],{"className":126,"code":127,"language":35,"meta":36},[33],"npm install -g pm2\npm2 start server.js --name webhook\npm2 save\npm2 startup  # 设置开机自启\n",[38,129,127],{"__ignoreMap":36},[14,131,133],{"id":132},"第-3-步github-设置-webhook","第 3 步：GitHub 设置 Webhook",[10,135,136,137,140,141],{},"打开 GitHub 仓库 → ",[38,138,139],{"code":139},"Settings"," → ",[38,142,143],{"code":143},"Webhooks",[145,146,147],"ul",{},[148,149,150,153],"li",{},[22,151,152],{},"Payload URL","：",[30,155,158],{"className":156,"code":157,"language":35,"meta":36},[33],"http://你的服务器公网IP:6688/webhook\n",[38,159,157],{"__ignoreMap":36},[145,161,162,170,183],{},[148,163,164,153,167],{},[22,165,166],{},"Content type",[38,168,169],{"code":169},"application/json",[148,171,172,175,176,178,179,182],{},[22,173,174],{},"Secret","：填写你在 ",[38,177,64],{"code":64}," 中设的 secret（比如 ",[38,180,181],{"code":181},"your_secret","）",[148,184,185,186],{},"触发事件选择：",[145,187,188],{},[148,189,190,191,194],{},"只勾选 ",[38,192,193],{"code":193},"Just the push event"," 即可",[14,196,197],{"id":197},"可能的错误",[10,199,200,201,204],{},"你可能碰到Github上Webhook返回200，但是没更新，请查看你设置的目录 ",[38,202,203],{"code":203},"/home/qinyu/nuxt-blog"," 并不是一个 Git 仓库。",[10,206,207],{},"可能你：",[145,209,210,216],{},[148,211,212,213],{},"没有执行 ",[38,214,215],{"code":215},"git clone 仓库地址",[148,217,218],{},"或者部署脚本中的工作目录设置错了",[14,220,222],{"id":221},"nuxt静态部署","Nuxt静态部署",[10,224,225],{},"如果你的博客和我一样是Nuxt的话，完全可以本地构建 + 只同步静态文件到服务器。",[10,227,228],{},"我之前用上面的方式，服务器上构建，太慢了，于是我想到了这种方法。",[10,230,231,232],{},"在Github创建一个分支，用来专门存储静态文件，然后服务器只拉取这个分支。这里取分支为",[38,233,234],{"code":234},"gh-pages",[145,236,237,246,251],{},[148,238,239],{},[22,240,241,242,245],{},"每次 push 代码到 ",[38,243,244],{"code":244},"main"," 分支",[148,247,248],{},[22,249,250],{},"自动构建 Nuxt 静态站点",[148,252,253],{},[22,254,255,256,259,260,245],{},"自动把 ",[38,257,258],{"code":258},".output/public"," 推送到 ",[38,261,234],{"code":234},[10,263,264],{},[22,265,266],{},"服务器只需要：",[145,268,269,276,282],{},[148,270,271,272,275],{},"拉取最新的静态文件（比如 ",[38,273,274],{"code":274},"git pull"," 或通过 rsync）",[148,277,278,279],{},"直接部署到网站目录 ",[38,280,281],{"code":281},"/www/wwwroot/xxxxx",[148,283,284,285,288,289],{},"不用 ",[38,286,287],{"code":287},"pnpm install"," 或 ",[38,290,291],{"code":291},"pnpm build",[10,293,294,297],{},[22,295,296],{},"服务器初始化",":",[10,299,300],{},"假设你服务器网站目录为空或没初始化过：",[10,302,303],{},"下面是以我自己的为例:",[30,305,308],{"className":306,"code":307,"language":35,"meta":36},[33],"cd /www/wwwroot\ngit clone https://github.com/yingzya/yingzya.github.io.git yingzya.top\ncd yingzya.top\ngit checkout -b gh-pages origin/gh-pages\n",[38,309,307],{"__ignoreMap":36},[10,311,312,313],{},"然后创建文件",[38,314,315],{"code":315},".github/workflows/deploy.yml",[30,317,322],{"className":318,"code":320,"language":321,"meta":36},[319],"language-yaml","name: Deploy Nuxt Static Site\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  build-and-deploy:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Setup Node.js\n        uses: actions/setup-node@v3\n        with:\n          node-version: '18'  # 或你本地用的版本\n\n      - name: Install pnpm\n        run: npm install -g pnpm\n\n      - name: Install dependencies\n        run: pnpm install\n\n      - name: Build Nuxt project\n        run: pnpm build\n\n      - name: Deploy to gh-pages\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: .output/public\n          publish_branch: gh-pages\n","yaml",[38,323,320],{"__ignoreMap":36},[48,325,197],{"id":326},"可能的错误-1",[10,328,329],{},[38,330,331],{"code":331},"The requested URL returned error: 403",[10,333,334,337],{},[38,335,336],{"code":336},"github-actions[bot]"," 没有权限推送到你的仓库，导致 403 拒绝访问。",[10,339,340],{},"打开你Github的项目，然后settings，然后左侧点击Actions，点击Gereral，确保下面的两个勾选上了",[342,343],"pic",{":caption":344,"src":345},"null","https://7.isyangs.cn/20250731/723b20ec409cf0976ee3459cf32c2809.png",[10,347,348,349,352],{},"记得配置下面的",[22,350,351],{},"Token","，如果访问权限不够的话。",[342,354],{":caption":344,"src":355},"https://7.isyangs.cn/20250731/b67f9cf6ba2490e5d050a288d0ecca0f.png",[10,357,358],{},[22,359,360],{},"解决方法一：给 Actions 用一个 PAT 代替默认 token",[145,362,363,374,380],{},[148,364,365,366,369,370,373],{},"你可以在 GitHub 生成一个 ",[22,367,368],{},"Personal Access Token (PAT)","，权限至少要包含 ",[22,371,372],{},"repo (所有)"," 权限",[148,375,376,377],{},"然后在你的仓库 Settings → Secrets → New repository secret 新建一个变量，比如叫 ",[38,378,379],{"code":379},"PERSONAL_TOKEN",[148,381,382],{},"修改 workflow 用这个 token：",[10,384,385],{},[22,386,387],{},"简单步骤生成 PAT：",[389,390,391,400,403,410,413],"ol",{},[148,392,393,394],{},"访问 ",[395,396,397],"a",{"href":397,"rel":398},"https://github.com/settings/tokens",[399],"nofollow",[148,401,402],{},"点击“Generate new token (classic)”",[148,404,405,406,409],{},"选中 ",[38,407,408],{"code":408},"repo"," 权限（全部权限）",[148,411,412],{},"生成后复制令牌",[148,414,415,416,418],{},"仓库→Settings→Secrets→Actions，新建 ",[38,417,379],{"code":379},"，粘贴保存",[48,420,422],{"id":421},"nodejs服务","NodeJS服务",[30,424,427],{"className":425,"code":426,"language":91,"meta":36},[89],"const http = require('http');\nconst { exec } = require('child_process');\n\nconst PORT = 6688;  // 监听端口\nconst SECRET = 'your_webhook_secret'; // 你在 GitHub webhook 里设置的 secret，和这里对应\n\n// 简单验证签名（可选，生产建议实现）\nfunction verifySignature(req, body) {\n  // 这里为了示例，暂时不验证，直接返回 true\n  return true;\n}\n\nconst server = http.createServer((req, res) => {\n  if (req.method === 'POST' && req.url === '/webhook') {\n    let body = '';\n    req.on('data', chunk => body += chunk);\n    req.on('end', () => {\n      if (!verifySignature(req, body)) {\n        res.writeHead(403);\n        res.end('Invalid signature');\n        return;\n      }\n\n      let payload;\n      try {\n        payload = JSON.parse(body);\n      } catch {\n        res.writeHead(400);\n        res.end('Invalid JSON');\n        return;\n      }\n\n      // 只处理 gh-pages 分支的 push 事件\n      if (payload.ref === 'refs/heads/gh-pages') {\n        console.log('🚀 gh-pages 分支更新，开始部署脚本...');\n        exec('sh /home/qinyu/deploy.sh', (err, stdout, stderr) => {\n          if (err) {\n            console.error(`❌ 部署脚本执行失败: ${err.message}`);\n            return;\n          }\n          console.log(`✅ 部署脚本输出:\\n${stdout}`);\n          if (stderr) {\n            console.error(`⚠️ 部署脚本错误输出:\\n${stderr}`);\n          }\n        });\n      } else {\n        console.log(`忽略非 gh-pages 分支更新: ${payload.ref}`);\n      }\n\n      res.writeHead(200);\n      res.end('Webhook received');\n    });\n  } else {\n    res.writeHead(404);\n    res.end();\n  }\n});\n\nserver.listen(PORT, () => {\n  console.log(`Webhook 监听服务已启动，端口 ${PORT}`);\n});\n\n",[38,428,426],{"__ignoreMap":36},[48,430,432],{"id":431},"自动部署脚本示例deploysh","自动部署脚本示例（deploy.sh）",[30,434,437],{"className":435,"code":436,"language":35,"meta":36},[33],"#!/bin/bash\n\nset -e\n\n# 1. 网站目录（请改成你的路径）\nWEB_ROOT=\"/www/wwwroot/yingzya.top\"\n\n# 2. 进入网站目录\ncd \"$WEB_ROOT\" || { echo \"目录不存在，退出\"; exit 1; }\n\n# 3. 确保当前在 gh-pages 分支\ngit checkout gh-pages\n\n# 4. 拉取最新代码\ngit pull origin gh-pages\n\necho \"✅ 静态文件已更新：$(date '+%Y-%m-%d %H:%M:%S')\"\n",[38,438,436],{"__ignoreMap":36},[10,440,441],{},[22,442,443],{},"1. 先创建部署脚本文件",[10,445,446,447,450,451,454,455,458],{},"文件在上面，按 ",[38,448,449],{"code":449},"Ctrl + O"," 保存，",[38,452,453],{"code":453},"Enter"," 确认，然后 ",[38,456,457],{"code":457},"Ctrl + X"," 退出编辑器。",[10,460,461],{},[22,462,463],{},"2. 赋予可执行权限",[30,465,468],{"className":466,"code":467,"language":35,"meta":36},[33],"chmod +x /home/qinyu/deploy.sh\n",[38,469,467],{"__ignoreMap":36},[48,471,473],{"id":472},"使用-pm2-守护运行可选","使用 PM2 守护运行(可选)",[30,475,478],{"className":476,"code":477,"language":35,"meta":36},[33],"npm install -g pm2\npm2 start /home/qinyu/webhook.js\npm2 save\npm2 startup\n",[38,479,477],{"__ignoreMap":36},[14,481,483],{"id":482},"进阶-githubapp","进阶-GitHubApp",[10,485,486,487,490],{},"每个 GitHub App 在不同仓库/组织下安装后，会生成一个 ",[22,488,489],{},"Installation ID","。",[10,492,493],{},[22,494,495],{},"1、准备",[10,497,498,501],{},[22,499,500],{},"App ID","（数字，GitHub App 设置页能看到）",[10,503,504,507,508,511,512],{},[22,505,506],{},"私钥 PEM 文件","（你在 GitHub App 设置 → Generate a private key 生成的 ",[38,509,510],{"code":510},".pem"," 文件）——",[22,513,514],{},"核心步骤",[10,516,517],{},[518,519],"img",{"alt":520,"src":521},"image-20250927210102621","https://video.yangzy.top/picgo/image-20250927210102621.png",[10,523,524],{},[22,525,526],{},"2. 生成 JWT",[10,528,529],{},"JWT = Header + Payload + 签名（用私钥 PEM）",[10,531,532],{},[22,533,534],{},"3. 获取 installation_id",[10,536,537],{},"用 JWT 调 API：",[30,539,544],{"className":540,"code":542,"language":543},[541],"language-text","curl -s -H \"Authorization: Bearer \u003CJWT>\" \\\n     -H \"Accept: application/vnd.github+json\" \\\n     https://api.github.com/app/installations\n","text",[38,545,542],{"__ignoreMap":36},{"title":36,"searchDepth":547,"depth":547,"links":548},4,[549,551,560,561,562,568],{"id":16,"depth":550,"text":17},2,{"id":42,"depth":550,"text":43,"children":552},[553,555,557,559],{"id":50,"depth":554,"text":51},3,{"id":60,"depth":554,"text":556},"2、创建server.js 文件：",{"id":96,"depth":554,"text":558},"3、创建部署脚本deploy.sh",{"id":122,"depth":554,"text":123},{"id":132,"depth":550,"text":133},{"id":197,"depth":550,"text":197},{"id":221,"depth":550,"text":222,"children":563},[564,565,566,567],{"id":326,"depth":554,"text":197},{"id":421,"depth":554,"text":422},{"id":431,"depth":554,"text":432},{"id":472,"depth":554,"text":473},{"id":482,"depth":550,"text":483},[570],"Linux","2025-07-31 19:42:40",false,"md","https://7.isyangs.cn/20250819/fd666e8034acd69bbf7d83d3b79de274.webp",{},true,"/2025/git",{"text":579,"minutes":580,"time":581,"words":582},"9 min read",8.06,483600,1612,null,{"title":5,"description":5},{"loc":577},"posts/2025/Git自动化部署",[588],"Git","2025-09-27 21:13:40","x24l9BYUrSWTsmPz-15bXd-2JF-rpVpBrVUUpng7cI4",[592,597],{"title":593,"path":594,"stem":595,"date":596,"type":583,"children":-1},"2025蓝桥杯突击训练","/2025/lanqiao2025","posts/2025/lanqiao2025","2025-03-27 23:45:35",{"title":598,"path":599,"stem":600,"date":601,"type":583,"children":-1},"PicGo配置去图图床","/2025/picgo","posts/2025/PicGo实现去图图床","2025-08-01 17:15:43",1759024133783]