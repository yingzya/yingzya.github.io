[{"data":1,"prerenderedAt":2591},["ShallowReactive",2],{"/2025/sky_takeaway":3,"surround-/2025/sky_takeaway":2585},{"id":4,"title":5,"body":6,"categories":2562,"date":2564,"description":2565,"draft":2566,"extension":2567,"image":2568,"meta":2569,"navigation":2570,"path":2571,"readingTime":2572,"recommend":2577,"references":2577,"seo":2578,"sitemap":2579,"stem":2580,"tags":2581,"type":2577,"updated":2564,"url":2577,"__hash__":2584},"content/posts/2025/Sky_takeaway.md","Java苍穹外卖",{"type":7,"value":8,"toc":2468},"minimark",[9,14,18,22,27,38,41,85,89,92,101,104,107,110,113,116,119,164,168,172,175,183,188,191,194,209,219,222,225,228,232,235,238,241,244,247,251,254,258,269,277,283,364,368,371,374,377,380,383,386,389,397,400,403,406,409,411,414,421,424,427,431,438,444,462,471,482,487,494,498,504,517,523,527,530,536,539,550,564,570,577,587,612,616,620,623,626,630,633,639,655,659,664,726,731,855,859,865,871,874,882,886,891,905,910,917,936,950,955,966,971,986,991,1006,1011,1026,1030,1035,1040,1045,1050,1054,1057,1060,1066,1072,1077,1083,1086,1092,1095,1100,1103,1109,1113,1116,1120,1123,1126,1129,1132,1135,1138,1141,1147,1243,1247,1251,1258,1287,1295,1299,1302,1313,1316,1323,1328,1349,1354,1386,1388,1394,1398,1422,1426,1453,1455,1461,1465,1485,1490,1498,1502,1528,1530,1536,1540,1561,1565,1571,1575,1602,1604,1610,1614,1635,1639,1645,1649,1676,1678,1683,1793,1797,1802,1806,1812,1817,1821,1827,1830,1835,1839,1845,1848,1853,1857,1863,1866,1871,1875,1881,2056,2060,2063,2066,2069,2074,2079,2087,2121,2124,2138,2142,2151,2154,2157,2160,2166,2170,2176,2180,2186,2190,2204,2207,2210,2213,2216,2219,2222,2226,2232,2235,2246,2249,2293,2299,2307,2325,2331,2335,2338,2341,2344,2350,2353,2356,2363,2367,2371,2374,2376,2387,2390,2393,2396,2399,2402,2406,2421,2424,2427,2454],[10,11,13],"h2",{"id":12},"day01-环境搭建","Day01 环境搭建",[15,16,17],"h3",{"id":17},"后端搭建-前后端连调",[19,20,21],"p",{},"nginx反向代理的好处：\n提高访问速度、进行负载均衡、保证后端服务安全",[23,24,26],"h4",{"id":25},"nginx反向代理的配置方式","nginx反向代理的配置方式：",[28,29,35],"pre",{"className":30,"code":32,"language":33,"meta":34},[31],"language-yaml","server {\n        listen       80;\n        server_name  localhost;\n        #charset koi8-r;\n        #access_log  logs/host.access.log  main;\n        location / {\n            root   html/sky;\n            index  index.html index.htm;\n        }\n\n","yaml","",[36,37,32],"code",{"__ignoreMap":34},[19,39,40],{},"nginx负载均衡策略：",[42,43,44,57],"table",{},[45,46,47],"thead",{},[48,49,50,54],"tr",{},[51,52,53],"th",{},"名称",[51,55,56],{},"说明",[58,59,60,69,77],"tbody",{},[48,61,62,66],{},[63,64,65],"td",{},"weight",[63,67,68],{},"权重方式，默认为1，权重越高，被分配的客户端就越多",[48,70,71,74],{},[63,72,73],{},"ip_hash",[63,75,76],{},"依据ip分配方式，每个访客可以固定访问一个后端服务",[48,78,79,82],{},[63,80,81],{},"least_coon",[63,83,84],{},"最少连接方式，把优先请求分配给连接数少的后端服务",[15,86,88],{"id":87},"swagger","Swagger",[19,90,91],{},"其用来生成接口文档，以及在线接口调试界面",[19,93,94,95],{},"官网:",[96,97,98],"a",{"href":98,"rel":99},"https://swagger.io/",[100],"nofollow",[19,102,103],{},"Knife4j是为Java MVC框架集成Swagger生成API文档的增强解决方案",[23,105,106],{"id":106},"使用方式",[19,108,109],{},"1、导入knife4j的maven坐标",[19,111,112],{},"2、在配置类中加入knife4j相关配置",[19,114,115],{},"3、设置静态资源文档映射，否则接口文档页面无法访问",[23,117,118],{"id":118},"常用注解",[42,120,121,130],{},[45,122,123],{},[48,124,125,128],{},[51,126,127],{},"注解",[51,129,56],{},[58,131,132,140,148,156],{},[48,133,134,137],{},[63,135,136],{},"@Api",[63,138,139],{},"用在类上，例如Controller，表示对类的说明",[48,141,142,145],{},[63,143,144],{},"@ApiModel",[63,146,147],{},"用在类上，例如entity、DTO、VO",[48,149,150,153],{},[63,151,152],{},"@ApiModelProperty",[63,154,155],{},"用在属性上，描述属性信息",[48,157,158,161],{},[63,159,160],{},"@ApiOperation",[63,162,163],{},"用在方法上，例如Controller的方法，说明方法的用途，",[10,165,167],{"id":166},"day02","Day02",[15,169,171],{"id":170},"使用apifox进行功能测试","使用Apifox进行功能测试",[23,173,174],{"id":174},"添加header的token",[19,176,177,178,182],{},"先进行登录，获取token。注意的是要先进行",[179,180,181],"strong",{},"开发环境的服务器配置","。",[184,185],"pic",{":caption":186,"src":187},"null","https://7.isyangs.cn/20250809/02b7bb89731f8c34f1e5daccd511eaf8.png",[19,189,190],{},"然后登录，获取token。",[184,192],{":caption":186,"src":193},"https://7.isyangs.cn/20250809/d24bf04cb55a965b6a5aab67b616a2b1.png",[19,195,196,197,200,201,204,205,208],{},"接下来，在新增员工接口中的",[179,198,199],{},"Auth","中选择",[179,202,203],{},"API Key","，",[179,206,207],{},"保存","之后点击发送即可。",[19,210,211,212,215,216],{},"要注意，",[179,213,214],{},"token是有时限的","，一般2小时，如果错误，记得",[179,217,218],{},"更新token",[184,220],{":caption":186,"src":221},"https://7.isyangs.cn/20250809/89ce8d0290f0d0c23b6e6c5fd5e91b41.png",[19,223,224],{},"成功如下图所示：",[184,226],{":caption":186,"src":227},"https://7.isyangs.cn/20250809/d6b17443ef5621375b58605f5141015e.png",[23,229,231],{"id":230},"_500错误","500错误",[19,233,234],{},"使用Apifox调试登录时报500错误，",[184,236],{":caption":186,"src":237},"https://7.isyangs.cn/20250809/906415061f9ba7a61121ac3d8f761e76.png",[19,239,240],{},"一般是数据库错误。",[184,242],{":caption":186,"src":243},"https://7.isyangs.cn/20250809/33b459c66ad327ade68c515409e16067.png",[19,245,246],{},"下面的值要和employee实体的属性值一一对应，而上面的则是数据库中的字段。",[15,248,250],{"id":249},"jwt-token","JWT token",[184,252],{":caption":186,"src":253},"https://7.isyangs.cn/20250809/eeb8a3cedc9c9e07837916902518f115.png",[23,255,257],{"id":256},"jwt-令牌","JWT 令牌",[19,259,260,261,264,265,268],{},"JWT 令牌（JSON Web Token）是一种用来安全传输信息的字符串，它由三部分组成：",[179,262,263],{},"Header（头部）、Payload（负载）和 Signature（签名）","，通过 ",[36,266,267],{"code":267},"."," 进行分隔。例如：",[28,270,275],{"className":271,"code":273,"language":274,"meta":34},[272],"language-bash","eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEwMDEsImV4cCI6MTY5NzMwMjY4MH0.dBjftJeZ4CVP-mB92K27uhbUJU1p1r_wW1gFWFOEjXk\n","bash",[36,276,273],{"__ignoreMap":34},[23,278,280],{"id":279},"jwt-在-vue3-springboot-认证中的流程",[179,281,282],{},"JWT 在 Vue3 + SpringBoot 认证中的流程",[284,285,286,301,329,351],"ol",{},[287,288,289,292],"li",{},[179,290,291],{},"用户登录",[293,294,295,298],"ul",{},[287,296,297],{},"Vue3 前端提交用户名和密码到 SpringBoot 后端。",[287,299,300],{},"SpringBoot 校验用户信息，如果正确，生成 JWT 并返回给前端。",[287,302,303,306],{},[179,304,305],{},"前端存储 JWT",[293,307,308,322],{},[287,309,310,311,314,315,318,319,321],{},"Vue3 前端接收 JWT，并存储在 ",[36,312,313],{"code":313},"localStorage"," 或 ",[36,316,317],{"code":317},"sessionStorage","（推荐 ",[36,320,317],{"code":317}," 避免 XSS 攻击）。",[287,323,324,325,328],{},"之后的 API 请求都会携带 JWT 作为 ",[36,326,327],{"code":327},"Authorization"," 头部。",[287,330,331,334],{},[179,332,333],{},"后端验证 JWT",[293,335,336,345,348],{},[287,337,338,339,341,342,182],{},"Vue3 前端每次请求 API 时，在 ",[36,340,327],{"code":327}," 头部添加 ",[36,343,344],{"code":344},"Bearer JWT_TOKEN",[287,346,347],{},"SpringBoot 拦截请求并解析 JWT，校验有效性。",[287,349,350],{},"解析成功则放行，否则返回 401 未授权。",[287,352,353,356],{},[179,354,355],{},"JWT 过期处理",[293,357,358,361],{},[287,359,360],{},"服务器端通常会设定 JWT 过期时间（如 2 小时）。",[287,362,363],{},"过期后，前端需要引导用户重新登录，或者实现 Token 刷新机制。",[15,365,367],{"id":366},"threadlocal","ThreadLocal",[19,369,370],{},"ThreadLocal并不是一个Thread，而是他的局部变量",[19,372,373],{},"ThreadLocal为每个线程提供单独一份存储空间，具有线程隔离的效果，只有在线程内才能获取到对应的值，线程外则不能访问",[15,375,376],{"id":376},"日期格式",[19,378,379],{},"解决方法：",[19,381,382],{},"1、在属性上加注解，对日期进行格式化",[184,384],{":caption":186,"src":385},"https://7.isyangs.cn/20250809/033427f7be6847c7d198842242453631.png",[19,387,388],{},"2、在WebMvcConfiguration中扩展Spring MVC的消息转换器，统一对日期类型进行格式化处理",[28,390,395],{"className":391,"code":393,"language":394,"meta":34},[392],"language-java","@Override\n    protected void extendMessageConverters(List\u003CHttpMessageConverter\u003C?>> converters) {\n        log.info(\"扩展消息转换器....\");\n        //创建一个消息转换器对象\n        MappingJackson2HttpMessageConverter converter = new MappingJackson2HttpMessageConverter();\n        //需要为消息转换器设置一个对象转换器，对象转化器可以将Java对象序列化为json数据\n        converter.setObjectMapper(new JacksonObjectMapper());\n        //将自己的消息转换器加入容器中\n        converters.add(0,converter);\n    }\n","java",[36,396,393],{"__ignoreMap":34},[15,398,399],{"id":399},"修改密码",[184,401],{":caption":186,"src":402},"https://7.isyangs.cn/20250809/cf0052caf2f02ea84350239fdd9f8c99.png",[19,404,405],{},"之前修改忘记买md5加密了。",[19,407,408],{},"可以看到我的原密码是1234567，那么接下来再修改回之前的123456.",[19,410,224],{},[184,412],{":caption":186,"src":413},"https://7.isyangs.cn/20250809/03814f9ff31e8c1ebcca7b2ece96f8cb.png",[19,415,416,417,420],{},"同时查看数据库中，密码确实是",[179,418,419],{},"加密","后的123456",[184,422],{":caption":186,"src":423},"https://7.isyangs.cn/20250809/73a8234ea5483f85744d09f34234f3df.png",[19,425,426],{},"步骤如下：",[23,428,430],{"id":429},"_1创建修改密码的方法","1、创建修改密码的方法",[19,432,433,434,437],{},"在",[179,435,436],{},"EmployeeController","中添加如下方法：",[28,439,442],{"className":440,"code":441,"language":394,"meta":34},[392],"@PutMapping(\"/editPassword\")\n    @ApiOperation(\"修改员工密码\")\n    public Result updatePassword(@RequestBody PasswordEditDTO passwordEditDTO) {\n        log.info(\"修改员工密码{}\", passwordEditDTO);\n        employeeService.updatePassword(passwordEditDTO);\n        return Result.success();\n    }\n",[36,443,441],{"__ignoreMap":34},[19,445,446,447,450,451,454,455,458,459,182],{},"其中",[179,448,449],{},"PasswordEditDTO","是资料中自带的，在sky-pojo的dto中。",[179,452,453],{},"DTO","一般用来",[179,456,457],{},"接收前端","的",[179,460,461],{},"数据",[19,463,464,466,467,470],{},[179,465,453],{},"（",[179,468,469],{},"Data Transfer Object","，数据传输对象）",[19,472,473,474,477,478,481],{},"它的主要作用是",[179,475,476],{},"封装数据","，简化不同模块或系统之间的数据传输，通常用于",[179,479,480],{},"传输对象的集合","。DTO 可以减少服务调用过程中的开销，避免直接暴露数据库实体或复杂的数据结构。",[19,483,484],{},[179,485,486],{},"为什么要使用 DTO？",[19,488,489,490,493],{},"假设你有一个复杂的数据库模型（如 ",[36,491,492],{"code":492},"Employee"," 类），它包含许多属性，但你并不希望把所有数据传递给客户端（例如，客户端不需要显示密码字段）。这时你可以通过 DTO 来封装需要传输的数据。",[23,495,497],{"id":496},"_2在service层声明接口并实现","2、在Service层声明接口并实现",[28,499,502],{"className":500,"code":501,"language":394,"meta":34},[392],"//修改员工密码,EmployeeService中\n    void updatePassword(PasswordEditDTO passwordEditDTO);\n",[36,503,501],{"__ignoreMap":34},[19,505,506,507,510,511,514,515,182],{},"然后实现，注意，由于我们数据库中存储的是",[179,508,509],{},"加密后的密码","，因此在",[179,512,513],{},"调用mapper之前","要对DTO中的新密码",[179,516,419],{},[28,518,521],{"className":519,"code":520,"language":394,"meta":34},[392],"/**\n     * 修改员工密码\n     * @param passwordEditDTO\n     */\n    @Override\n    public void updatePassword(PasswordEditDTO passwordEditDTO) {\n        //设置密码\n        passwordEditDTO.setNewPassword(DigestUtils.md5DigestAsHex(passwordEditDTO.getNewPassword().getBytes()));\n        employeeMapper.updatePassword(passwordEditDTO);\n    }\n",[36,522,520],{"__ignoreMap":34},[23,524,526],{"id":525},"_3mapper进行数据库操作","3、Mapper进行数据库操作",[19,528,529],{},"由于只是修改操作比较简单，因此通过使用注解来实现。",[28,531,534],{"className":532,"code":533,"language":394,"meta":34},[392],"/**\n     * 修改员工密码\n     * @param passwordEditDTO\n     */\n    @Update(\"UPDATE employee SET password = #{newPassword} WHERE id = #{empId}\")\n    void updatePassword(PasswordEditDTO passwordEditDTO);\n",[36,535,533],{"__ignoreMap":34},[19,537,538],{},"一些细节：",[19,540,541,542,545,546,549],{},"MyBatis 并不支持像 ",[36,543,544],{"code":544},"#{passwordEditDTO.newPassword}"," 这样",[179,547,548],{},"通过对象的嵌套属性","访问。",[19,551,552,553,555,556,559,560,563],{},"如果想访问 ",[36,554,449],{"code":449}," 中的 ",[36,557,558],{"code":558},"newPassword"," 和 ",[36,561,562],{"code":562},"empId"," 属性，应该使用以下方式进行修改",[28,565,568],{"className":566,"code":567,"language":394,"meta":34},[392],"@Update(\"UPDATE employee SET password = #{newPassword} WHERE id = #{empId}\")\nvoid updatePassword(PasswordEditDTO passwordEditDTO);\n",[36,569,567],{"__ignoreMap":34},[19,571,572,573,576],{},"MyBatis 使用 ",[36,574,575],{"code":575},"#{}"," 来引用传递给 SQL 语句的参数。",[19,578,579,580,559,583,586],{},"在的原始 SQL 中，",[36,581,582],{"code":582},"passwordEditDTO.newPassword",[36,584,585],{"code":585},"passwordEditDTO.empId"," 这样的写法是错误的，因为 MyBatis 只会根据参数的字段名直接进行映射。",[19,588,589,590,593,594,597,598,601,602,559,605,608,609,611],{},"如果你传递的是一个对象，MyBatis 会自动把",[179,591,592],{},"对象的属性","与 ",[179,595,596],{},"SQL 语句中的参数","进行",[179,599,600],{},"匹配","。所以应该使用 ",[36,603,604],{"code":604},"#{newPassword}",[36,606,607],{"code":607},"#{empId}"," 直接引用 ",[36,610,449],{"code":449}," 的属性。",[10,613,615],{"id":614},"day03","Day03",[23,617,619],{"id":618},"_1图片前端无法回显","1、图片前端无法回显",[184,621],{":caption":186,"src":622},"https://7.isyangs.cn/20250809/a49383c18a9c3b96aa01fae56815b8d0.png",[19,624,625],{},"如果在前端添加菜品的图片无法回显，就将阿里云OSS的读写权限改为公共读即可。",[23,627,629],{"id":628},"_2usegeneratedkeys","2、useGeneratedKeys",[19,631,632],{},"表示在执行完数据库操作之后要获取主键值",[28,634,637],{"className":635,"code":636,"language":394,"meta":34},[392],"\u003Cinsert id=\"insert\" useGeneratedKeys=\"true\" keyProperty=\"id\">\n        INSERT INTO dish (name, category_id, price, image, description, status, create_time, update_time, create_user, update_user)\n        VALUES (#{name}, #{categoryId}, #{price}, #{image}, #{description}, #{status}, #{createTime}, #{updateTime}, #{createUser}, #{updateUser});\n    \u003C/insert>\n",[36,638,636],{"__ignoreMap":34},[19,640,641,559,644,647,648,182],{},[36,642,643],{"code":643},"useGeneratedKeys=\"true\"",[36,645,646],{"code":646},"keyProperty=\"id\"","，它的作用是 ",[179,649,650,651,654],{},"自动获取数据库生成的主键 ID 并赋值给 Java 对象的 ",[36,652,653],{"code":653},"id"," 属性",[23,656,658],{"id":657},"_3vo和dto","3、VO和DTO",[19,660,661],{},[179,662,663],{},"VO 和 DTO 的定义",[42,665,666,689],{},[45,667,668],{},[48,669,670,674,679,684],{},[51,671,672],{},[179,673,53],{},[51,675,676],{},[179,677,678],{},"全称",[51,680,681],{},[179,682,683],{},"作用",[51,685,686],{},[179,687,688],{},"主要应用场景",[58,690,691,709],{},[48,692,693,698,701,706],{},[63,694,695],{},[179,696,697],{},"VO（视图对象）",[63,699,700],{},"View Object",[63,702,703],{},[179,704,705],{},"封装返回给前端的数据",[63,707,708],{},"只用于 Controller 层，保证返回的数据格式符合前端需求",[48,710,711,716,718,723],{},[63,712,713],{},[179,714,715],{},"DTO（数据传输对象）",[63,717,469],{},[63,719,720],{},[179,721,722],{},"用于 Service 层之间的数据传输",[63,724,725],{},"在 Controller 和 Service 之间传递数据，或者用于多个微服务之间传输数据",[19,727,728],{},[179,729,730],{},"VO 和 DTO 的区别",[42,732,733,752],{},[45,734,735],{},[48,736,737,742,747],{},[51,738,739],{},[179,740,741],{},"对比项",[51,743,744],{},[179,745,746],{},"VO（View Object）",[51,748,749],{},[179,750,751],{},"DTO（Data Transfer Object）",[58,753,754,775,795,814,832],{},[48,755,756,760,766],{},[63,757,758],{},[179,759,683],{},[63,761,762,765],{},[179,763,764],{},"封装后端返回给前端的数据","，对数据进行格式化、脱敏",[63,767,768,771,772],{},[179,769,770],{},"用于后端不同层之间的数据传输","，通常用于 ",[179,773,774],{},"Controller 和 Service 层交互",[48,776,777,782,789],{},[63,778,779],{},[179,780,781],{},"是否与前端交互",[63,783,784,785,788],{},"是，VO 主要用于 ",[179,786,787],{},"返回 JSON"," 给前端",[63,790,791,792],{},"否，DTO 主要用于 ",[179,793,794],{},"内部数据传输",[48,796,797,802,808],{},[63,798,799],{},[179,800,801],{},"是否包含业务逻辑",[63,803,804,807],{},[179,805,806],{},"不包含","，只用于数据展示",[63,809,810,813],{},[179,811,812],{},"可能包含"," 一些基本的业务逻辑，如字段验证",[48,815,816,821,827],{},[63,817,818],{},[179,819,820],{},"是否与数据库表直接对应",[63,822,823,826],{},[179,824,825],{},"不一定","，可能是多个表数据的组合",[63,828,829,831],{},[179,830,825],{},"，但通常是数据库表字段的映射",[48,833,834,839,849],{},[63,835,836],{},[179,837,838],{},"字段是否与 Entity 相同",[63,840,841,844,845,848],{},[179,842,843],{},"可能不同","，VO 可能会隐藏一些敏感数据（如 ",[36,846,847],{"code":847},"password","）",[63,850,851,854],{},[179,852,853],{},"通常相同","，但可能会增加校验规则",[23,856,858],{"id":857},"_4mybatisxml","4、MyBatis、XML",[19,860,861,864],{},[179,862,863],{},"XML（可扩展标记语言，Extensible Markup Language）"," 是一种标记语言，用于定义文档的结构，主要用于数据交换和存储。",[19,866,867,870],{},[179,868,869],{},"MyBatis"," 是一个流行的 Java 持久层框架，它提供了一个支持定制化 SQL、存储过程和高级映射的框架。MyBatis 通过将 Java 对象与数据库表中的数据进行映射，使开发者可以更加灵活地进行数据库操作。与 Hibernate 不同，MyBatis 需要开发者手动编写 SQL 语句，这使得它在一些复杂查询场景下更具优势，尤其是在性能要求较高的项目中。",[19,872,873],{},"MyBatis 的核心就是使用 XML 配置文件或注解来定义 SQL 语句，并将结果映射到 Java 对象中。",[28,875,880],{"className":876,"code":878,"language":879,"meta":34},[877],"language-xml","\u003Cmapper namespace=\"com.example.UserMapper\">\n  \u003Cselect id=\"getUserById\" resultType=\"com.example.User\">\n    SELECT * FROM users WHERE id = #{id}\n  \u003C/select>\n\u003C/mapper>\n","xml",[36,881,878],{"__ignoreMap":34},[23,883,885],{"id":884},"_5动态sql","5、动态SQL",[19,887,888],{},[179,889,890],{},"什么是动态 SQL？",[19,892,893,896,897,900,901,904],{},[179,894,895],{},"动态 SQL"," 是指 ",[179,898,899],{},"SQL 语句在运行时动态拼接","，而不是固定不变的 SQL 语句。\n在 MyBatis 中，动态 SQL 允许根据 ",[179,902,903],{},"不同的查询条件"," 生成不同的 SQL 语句，以提高查询的灵活性和效率。",[19,906,907],{},[179,908,909],{},"为什么需要动态 SQL？",[19,911,912,913,916],{},"在实际开发中，查询条件往往是 ",[179,914,915],{},"可选"," 的，比如：",[293,918,919,926,931],{},[287,920,921,922,925],{},"按 ",[179,923,924],{},"用户名"," 查询用户",[287,927,921,928,925],{},[179,929,930],{},"手机号",[287,932,921,933,925],{},[179,934,935],{},"用户名和手机号",[19,937,938,939,942,943,945,946,949],{},"如果每种情况都写一个 ",[36,940,941],{"code":941},"SQL"," 方法，代码会很冗余。\n而使用 ",[179,944,895],{},"，可以 ",[179,947,948],{},"根据条件动态生成 SQL 语句","，减少重复代码，提高性能。",[19,951,952],{},[179,953,954],{},"为什么使用 XML 来写动态 SQL？",[19,956,957,958,961,962,965],{},"在 MyBatis 中，动态 SQL ",[179,959,960],{},"既可以使用 XML，也可以用注解","，但通常推荐 ",[179,963,964],{},"使用 XML","，原因如下：",[19,967,968],{},[179,969,970],{},"1. XML 代码更清晰",[293,972,973,983],{},[287,974,975,978,979,982],{},[179,976,977],{},"如果 SQL 语句较复杂","，比如 ",[36,980,981],{"code":981},"if、foreach、choose"," 等，使用 XML 更直观。",[287,984,985],{},"代码可读性强，方便维护。",[19,987,988],{},[179,989,990],{},"2. 方便修改，不需要重新编译代码",[293,992,993,1000],{},[287,994,995,996,999],{},"SQL 逻辑变化时，只需要 ",[179,997,998],{},"修改 XML 文件","，而不用改 Java 代码。",[287,1001,1002,1005],{},[179,1003,1004],{},"不需要重启项目","，比注解方式更灵活。",[19,1007,1008],{},[179,1009,1010],{},"3. 支持更丰富的动态 SQL 语法",[293,1012,1013,1020],{},[287,1014,1015,1016,1019],{},"XML 支持 ",[36,1017,1018],{"code":1018},"\u003Cif>、\u003Cchoose>、\u003Cwhere>、\u003Cforeach>","，可以更轻松地实现复杂 SQL 逻辑。",[287,1021,1022,1025],{},[179,1023,1024],{},"注解模式下，SQL 只能拼接字符串","，写多了很难维护。",[23,1027,1029],{"id":1028},"_6注解相关","6、注解相关",[19,1031,1032],{},[179,1033,1034],{},"@RequestParam",[19,1036,1037,1039],{},[36,1038,1034],{"code":1034}," 是 Spring MVC 中的一个注解，用于将 HTTP 请求中的参数绑定到方法的参数上。它常用于处理 GET 请求中的查询参数或表单提交的参数。",[19,1041,1042],{},[179,1043,1044],{},"@PathVariable",[19,1046,1047,1049],{},[36,1048,1044],{"code":1044}," 是 Spring MVC 中的一个注解，用于从 URL 路径中提取变量并传递给控制器方法的参数。它常用于 RESTful 风格的 API，在路径中直接包含参数，而不是通过查询字符串传递。",[23,1051,1053],{"id":1052},"_7根据分类id查询菜品","7、根据分类id查询菜品",[19,1055,1056],{},"先看接口文档，是GET请求，并且传入的是菜品的id，我们可以发现这个和根据分类id查分类非常相似，于是模仿着写即可。",[184,1058],{":caption":186,"src":1059},"https://7.isyangs.cn/20250809/4a8ddd3b5317aa98d5e704486379dc97.png",[19,1061,433,1062,1065],{},[179,1063,1064],{},"DishController","中添加如下代码：",[28,1067,1070],{"className":1068,"code":1069,"language":394,"meta":34},[392],"/**\n     * 根据分类id查询菜品\n     * @param categoryId\n     * @return\n     */\n    @GetMapping(\"/list\")\n    @ApiOperation(\"根据分类id查询菜品\")\n    public Result\u003CList\u003CDish>> list(Long categoryId){\n        List\u003CDish> list = dishService.list(categoryId);\n        return Result.success(list);\n    }\n",[36,1071,1069],{"__ignoreMap":34},[19,1073,433,1074,1065],{},[179,1075,1076],{},"DishService",[28,1078,1081],{"className":1079,"code":1080,"language":394,"meta":34},[392],"/**\n     * 根据分类id查询菜品\n     * @param categoryId\n     * @return\n     */\n    List\u003CDish> list(Long categoryId);\n",[36,1082,1080],{"__ignoreMap":34},[19,1084,1085],{},"DishServiceImpl中如下：",[28,1087,1090],{"className":1088,"code":1089,"language":394,"meta":34},[392],"@Override\n    public List\u003CDish> list(Long categoryId) {\n        return dishMapper.list(categoryId);\n    }\n",[36,1091,1089],{"__ignoreMap":34},[19,1093,1094],{},"DishMapper：",[28,1096,1098],{"className":1097,"code":1080,"language":394,"meta":34},[392],[36,1099,1080],{"__ignoreMap":34},[19,1101,1102],{},"DishMapper.xml:",[28,1104,1107],{"className":1105,"code":1106,"language":879,"meta":34},[877],"\u003Cselect id=\"list\" resultType=\"Dish\">\n        select * from dish\n        where category_id = #{categoryId}\n        order by create_time desc\n    \u003C/select>\n",[36,1108,1106],{"__ignoreMap":34},[23,1110,1112],{"id":1111},"_8菜品的起售停售","8、菜品的起售停售",[19,1114,1115],{},"与员工的类似不过多赘述",[10,1117,1119],{"id":1118},"day04作业","Day04(作业)",[19,1121,1122],{},"与之前菜品类似，模仿即可，这里提一下我自己的错误。",[23,1124,1125],{"id":1125},"点击修改如果无法回显",[184,1127],{":caption":186,"src":1128},"https://7.isyangs.cn/20250809/f73cf5a59e5b3d8a963d24384bbc0071.png",[19,1130,1131],{},"点击修改如果无法回显则说明数据库忘记插入了。如下图，记得加上：",[184,1133],{":caption":186,"src":1134},"https://7.isyangs.cn/20250809/7418a2e058f2c612fd4820e76e6247ac.png",[23,1136,1137],{"id":1137},"数据删除",[19,1139,1140],{},"自己写的时候主要是删除功能没能实现，后面发现是相关的SQL语句不太熟练。",[28,1142,1145],{"className":1143,"code":1144,"language":879,"meta":34},[877],"\u003Cdelete id=\"deleteByDishIds\">\n        delete from dish_flavor where dish_id in\n        \u003Cforeach collection=\"dishIds\" open=\"(\" close=\")\" separator=\",\" item=\"dishId\">\n            #{dishId}\n        \u003C/foreach>\n    \u003C/delete>\n",[36,1146,1144],{"__ignoreMap":34},[42,1148,1149,1158],{},[45,1150,1151],{},[48,1152,1153,1156],{},[51,1154,1155],{},"参数名",[51,1157,683],{},[58,1159,1160,1183,1202,1215,1228],{},[48,1161,1162,1165],{},[63,1163,1164],{},"collection=\"dishIds\"",[63,1166,1167,1168,1171,1172,1175,1176,466,1179,1182],{},"指定 ",[179,1169,1170],{},"Java 传入的参数"," ",[36,1173,1174],{"code":1174},"dishIds","，要求它是一个 ",[179,1177,1178],{},"列表",[36,1180,1181],{"code":1181},"List\u003CInteger>","）。",[48,1184,1185,1188],{},[63,1186,1187],{},"item=\"dishId\"",[63,1189,1190,1191,1194,1195,1197,1198,1201],{},"代表",[179,1192,1193],{},"每次遍历时的元素","，即 ",[36,1196,1174],{"code":1174}," 列表中的每个 ",[36,1199,1200],{"code":1200},"dishId"," 值。",[48,1203,1204,1207],{},[63,1205,1206],{},"open=\"(\"",[63,1208,1209,1171,1212,182],{},[179,1210,1211],{},"在 SQL 语句中添加左括号",[36,1213,1214],{"code":1214},"(",[48,1216,1217,1220],{},[63,1218,1219],{},"close=\")\"",[63,1221,1222,1171,1225,182],{},[179,1223,1224],{},"在 SQL 语句中添加右括号",[36,1226,1227],{"code":1227},")",[48,1229,1230,1233],{},[63,1231,1232],{},"separator=\",\"",[63,1234,1235,1242],{},[179,1236,1237,1238,1241],{},"每个 dishId 之间用 ",[36,1239,1240],{"code":1240},","," 连接","，符合 SQL 语法要求。",[10,1244,1246],{"id":1245},"day05","Day05",[15,1248,1250],{"id":1249},"redis部分","Redis部分",[19,1252,1253,1254,1257],{},"Redis是基于一个",[179,1255,1256],{},"内存","的key-value结构数据库",[42,1259,1260,1270],{},[45,1261,1262],{},[48,1263,1264,1267],{},[51,1265,1266],{},"key",[51,1268,1269],{},"value",[58,1271,1272,1279],{},[48,1273,1274,1276],{},[63,1275,653],{},[63,1277,1278],{},"101",[48,1280,1281,1284],{},[63,1282,1283],{},"name",[63,1285,1286],{},"小智",[293,1288,1289,1292],{},[287,1290,1291],{},"基于内存存储，读写性能高",[287,1293,1294],{},"适合存储热点数据",[23,1296,1298],{"id":1297},"redis常用数据类型","Redis常用数据类型",[19,1300,1301],{},"在redis中key是字符串类型，value有五种常用的数据类型：\n字符串string、哈希hash、列表list、集合set、有序集合sorted set/zset",[19,1303,1304,1305,1308,1309,1312],{},"Redis 主要有 ",[179,1306,1307],{},"五种常用数据类型","，分别是：",[179,1310,1311],{},"String、List、Hash、Set、ZSet（Sorted Set）","。每种数据类型都有不同的特点和适用场景，下面我详细讲解一下。",[1314,1315],"hr",{},[1317,1318,1320],"h5",{"id":1319},"_1-string字符串",[179,1321,1322],{},"1. String（字符串）",[19,1324,1325],{},[179,1326,1327],{},"特点：",[293,1329,1330,1339],{},[287,1331,1332,1335,1336,182],{},[179,1333,1334],{},"最基本的数据类型","，可以存储 ",[179,1337,1338],{},"字符串、整数、浮点数、二进制数据（如图片）",[287,1340,1341,1344,1345,1348],{},[179,1342,1343],{},"单个 key"," 最多能存储 ",[179,1346,1347],{},"512MB"," 的数据。",[19,1350,1351],{},[179,1352,1353],{},"应用场景：",[293,1355,1356,1365,1377],{},[287,1357,1358,1361,1362,1182],{},[179,1359,1360],{},"缓存用户信息","（如 ",[36,1363,1364],{"code":1364},"SET user:123 name \"Tom\"",[287,1366,1367,466,1370,1373,1374,1182],{},[179,1368,1369],{},"计数器",[36,1371,1372],{"code":1372},"INCR","、",[36,1375,1376],{"code":1376},"DECR",[287,1378,1379,466,1382,1385],{},[179,1380,1381],{},"分布式锁",[36,1383,1384],{"code":1384},"SETNX"," 实现原子锁）。",[1314,1387],{},[1317,1389,1391],{"id":1390},"_2-list列表",[179,1392,1393],{},"2. List（列表）",[19,1395,1396],{},[179,1397,1327],{},[293,1399,1400,1417],{},[287,1401,1402,1405,1406,1409,1410,1413,1414],{},[179,1403,1404],{},"双向链表结构","，支持 ",[179,1407,1408],{},"头部、尾部插入删除","，适用于 ",[179,1411,1412],{},"队列、栈"," 场景。可以有重复元素，",[179,1415,1416],{},"按照插入顺序排序",[287,1418,1419,182],{},[179,1420,1421],{},"可以存储 2^32 - 1（大约 40 亿）个元素",[19,1423,1424],{},[179,1425,1353],{},[293,1427,1428,1441,1447],{},[287,1429,1430,1433,1434,1437,1438,1182],{},[179,1431,1432],{},"消息队列","（生产者 ",[36,1435,1436],{"code":1436},"RPUSH","，消费者 ",[36,1439,1440],{"code":1440},"LPOP",[287,1442,1443,1446],{},[179,1444,1445],{},"任务队列","（异步任务处理）。",[287,1448,1449,1452],{},[179,1450,1451],{},"社交动态流","（存储用户发布的动态）。",[1314,1454],{},[1317,1456,1458],{"id":1457},"_3-hash哈希",[179,1459,1460],{},"3. Hash（哈希）",[19,1462,1463],{},[179,1464,1327],{},[293,1466,1467,1477],{},[287,1468,1469,1472,1473,1476],{},[179,1470,1471],{},"类似于 Python 的字典","，用于存储",[179,1474,1475],{},"对象信息","（如用户信息）。",[287,1478,1479,1361,1482,1182],{},[179,1480,1481],{},"适用于存储对象，避免使用多个 String key",[36,1483,1484],{"code":1484},"user:123 name Tom age 20",[19,1486,1487],{},[179,1488,1489],{},"常用命令：",[28,1491,1496],{"className":1492,"code":1494,"language":1495,"meta":34},[1493],"language-shell","HSET key field value  # 设置某个字段的值\nHGET key field        # 获取某个字段的值\nHGETALL key          # 获取所有字段和值\nHDEL key field       # 删除某个字段\nHEXISTS key field    # 判断字段是否存在\nHINCRBY key field n  # 某个字段的值加 n\n","shell",[36,1497,1494],{"__ignoreMap":34},[19,1499,1500],{},[179,1501,1353],{},[293,1503,1504,1512,1520],{},[287,1505,1506,1361,1509,1182],{},[179,1507,1508],{},"存储用户信息",[36,1510,1511],{"code":1511},"HSET user:123 name \"Tom\"",[287,1513,1514,1361,1517,1182],{},[179,1515,1516],{},"存储商品信息",[36,1518,1519],{"code":1519},"HSET product:456 name \"iPhone\"",[287,1521,1522,1361,1525,1182],{},[179,1523,1524],{},"存储会话数据",[36,1526,1527],{"code":1527},"HSET session:789 token \"xyz123\"",[1314,1529],{},[1317,1531,1533],{"id":1532},"_4-set集合",[179,1534,1535],{},"4. Set（集合）",[19,1537,1538],{},[179,1539,1327],{},[293,1541,1542,1552],{},[287,1543,1544,1547,1548,1551],{},[179,1545,1546],{},"无序且不允许重复元素","，适合 ",[179,1549,1550],{},"去重"," 场景。",[287,1553,1554,1557,1558,182],{},[179,1555,1556],{},"支持交集、并集、差集"," 计算，适合",[179,1559,1560],{},"社交网络",[19,1562,1563],{},[179,1564,1489],{},[28,1566,1569],{"className":1567,"code":1568,"language":1495,"meta":34},[1493],"SADD key value    # 添加元素\nSREM key value    # 移除元素\nSMEMBERS key      # 获取集合中所有元素\nSISMEMBER key value # 判断元素是否存在\nSINTER key1 key2  # 求交集\nSUNION key1 key2  # 求并集\nSDIFF key1 key2   # 求差集\n",[36,1570,1568],{"__ignoreMap":34},[19,1572,1573],{},[179,1574,1353],{},[293,1576,1577,1584,1593],{},[287,1578,1579,1361,1581,1182],{},[179,1580,1550],{},[36,1582,1583],{"code":1583},"SADD ip_blacklist \"192.168.1.1\"",[287,1585,1586,1361,1589,1592],{},[179,1587,1588],{},"社交关系",[36,1590,1591],{"code":1591},"SINTER user:1:friends user:2:friends"," 获取共同好友）。",[287,1594,1595,1361,1598,1601],{},[179,1596,1597],{},"标签系统",[36,1599,1600],{"code":1600},"SADD user:tags \"AI\""," 存储用户兴趣标签）。",[1314,1603],{},[1317,1605,1607],{"id":1606},"_5-zsetsorted-set有序集合",[179,1608,1609],{},"5. ZSet（Sorted Set，有序集合）",[19,1611,1612],{},[179,1613,1327],{},[293,1615,1616,1630],{},[287,1617,1618,1621,1622,1625,1626,1629],{},[179,1619,1620],{},"带分数的 Set","，元素是 ",[179,1623,1624],{},"唯一的","，但可以按照 ",[179,1627,1628],{},"分数"," 进行排序。",[287,1631,1632,182],{},[179,1633,1634],{},"适用于排行榜、优先级队列",[19,1636,1637],{},[179,1638,1489],{},[28,1640,1643],{"className":1641,"code":1642,"language":1495,"meta":34},[1493],"ZADD key score value  # 添加元素并指定分数\nZREM key value        # 移除元素\nZRANGE key start stop [WITHSCORES]  # 获取排名范围\nZREVRANGE key start stop [WITHSCORES]  # 逆序获取排名\nZRANK key value       # 获取元素排名（从小到大）\nZREVRANK key value    # 获取元素排名（从大到小）\nZSCORE key value      # 获取元素的分数\n",[36,1644,1642],{"__ignoreMap":34},[19,1646,1647],{},[179,1648,1353],{},[293,1650,1651,1659,1667],{},[287,1652,1653,1361,1656,1182],{},[179,1654,1655],{},"排行榜",[36,1657,1658],{"code":1658},"ZADD game_score 100 \"Tom\"",[287,1660,1661,1361,1664,1182],{},[179,1662,1663],{},"任务优先级队列",[36,1665,1666],{"code":1666},"ZADD task_queue 1 \"task1\"",[287,1668,1669,1361,1672,1675],{},[179,1670,1671],{},"延迟任务调度",[36,1673,1674],{"code":1674},"ZADD delay_queue 1681234567 \"order:123\""," 存储订单超时时间）。",[1314,1677],{},[1317,1679,1681],{"id":1680},"总结",[179,1682,1680],{},[42,1684,1685,1701],{},[45,1686,1687],{},[48,1688,1689,1692,1695,1698],{},[51,1690,1691],{},"数据类型",[51,1693,1694],{},"结构",[51,1696,1697],{},"主要特点",[51,1699,1700],{},"适用场景",[58,1702,1703,1721,1739,1757,1775],{},[48,1704,1705,1710,1713,1716],{},[63,1706,1707],{},[179,1708,1709],{},"String",[63,1711,1712],{},"普通字符串",[63,1714,1715],{},"存储简单值，支持整数/浮点数操作",[63,1717,1718],{},[179,1719,1720],{},"缓存、计数器、分布式锁",[48,1722,1723,1728,1731,1734],{},[63,1724,1725],{},[179,1726,1727],{},"List",[63,1729,1730],{},"双向链表",[63,1732,1733],{},"允许左右插入/删除，适合队列",[63,1735,1736],{},[179,1737,1738],{},"消息队列、任务队列、社交动态",[48,1740,1741,1746,1749,1752],{},[63,1742,1743],{},[179,1744,1745],{},"Hash",[63,1747,1748],{},"字典（key-value）",[63,1750,1751],{},"适合存储对象，节省空间",[63,1753,1754],{},[179,1755,1756],{},"用户信息、商品信息、会话数据",[48,1758,1759,1764,1767,1770],{},[63,1760,1761],{},[179,1762,1763],{},"Set",[63,1765,1766],{},"无序集合",[63,1768,1769],{},"元素唯一，支持交并差运算，无序且无重复",[63,1771,1772],{},[179,1773,1774],{},"去重、好友关系、标签系统",[48,1776,1777,1782,1785,1788],{},[63,1778,1779],{},[179,1780,1781],{},"ZSet",[63,1783,1784],{},"有序集合",[63,1786,1787],{},"元素唯一，支持排序，无重复，根据分数升序排序",[63,1789,1790],{},[179,1791,1792],{},"排行榜、优先级队列、延迟任务",[23,1794,1796],{"id":1795},"redis常用命令","Redis常用命令",[1317,1798,1800],{"id":1799},"_1-string字符串-1",[179,1801,1322],{},[19,1803,1804],{},[179,1805,1489],{},[28,1807,1810],{"className":1808,"code":1809,"language":1495,"meta":34},[1493],"SET key value   # 存储一个值\nGET key         # 读取一个值\nSETEX key seconds value #设定指定key的值，并将key的过期时间设定为seconds秒\nSETNX key value #只有在key不存在时设置key的值\n",[36,1811,1809],{"__ignoreMap":34},[1317,1813,1815],{"id":1814},"_2-list列表-1",[179,1816,1393],{},[19,1818,1819],{},[179,1820,1489],{},[28,1822,1825],{"className":1823,"code":1824,"language":1495,"meta":34},[1493],"LPUSH key value1 [value2]  # 将一个或多个值插入到列表头部\nLRANGE key start stop  # 获取指定范围的元素\nLLEN key         # 获取列表长度\nRPOP key         # 移除并获取列表最后一个元素\n",[36,1826,1824],{"__ignoreMap":34},[184,1828],{":caption":186,"src":1829},"https://7.isyangs.cn/20250809/9a0e318a1d693b2d8c137bab59a58eac.png",[1317,1831,1833],{"id":1832},"_3-hash哈希-1",[179,1834,1460],{},[19,1836,1837],{},[179,1838,1489],{},[28,1840,1843],{"className":1841,"code":1842,"language":1495,"meta":34},[1493],"HSET key field value  # 设置某个字段的值\nHGET key field        # 获取某个字段的值\nHDEL key field       #删除存储在哈希表中的指定字段\nHKEYS key            #获取哈希表中的所有字段\nHVALS key            #获取哈希表中的所有值\n",[36,1844,1842],{"__ignoreMap":34},[184,1846],{":caption":186,"src":1847},"https://7.isyangs.cn/20250809/19bde0e4a870deaa29cef51d2bcea5c0.png",[1317,1849,1851],{"id":1850},"_4-set集合-1",[179,1852,1535],{},[19,1854,1855],{},[179,1856,1489],{},[28,1858,1861],{"className":1859,"code":1860,"language":1495,"meta":34},[1493],"SADD key member1 [member2]    # 添加一个或多个元素\nSMEMBERS key      # 获取集合中所有元素\nSCARD key         #获取集合的成员数\nSINTER key1 [key2]  # 返回给定所有集合的交集\nSUNION key1 [key2]  # 返回给定所有集合的并集\nSREM key [value1] [value2]    # 删除集合中的一个或多个成员   \n",[36,1862,1860],{"__ignoreMap":34},[184,1864],{":caption":186,"src":1865},"https://7.isyangs.cn/20250809/4157886a174c7e8edb409d496ac60ae2.png",[1317,1867,1869],{"id":1868},"_5-zsetsorted-set有序集合-1",[179,1870,1609],{},[19,1872,1873],{},[179,1874,1489],{},[28,1876,1879],{"className":1877,"code":1878,"language":1495,"meta":34},[1493],"ZADD key score1 value1 [score2 value2]  # 添加元素并指定分数\nZRANGE key start stop [WITHSCORES]  # 获取排名范围\nZINCRBY key increment member #有序集合中对指定成员的分数加上增量increment\nZREM key member [member2...] #移除有序集合中的一个或多个成员\n",[36,1880,1878],{"__ignoreMap":34},[184,1882,1884,1887,1891,1897,1901,1904,1908,1914,1928,1932,1936,1939,1942,1945,1993,1998,2053],{":caption":186,"src":1883},"https://7.isyangs.cn/20250809/4b7050775780404540004358f45ffc33.png",[19,1885,1886],{},"::、",[1317,1888,1890],{"id":1889},"_6通用命令","6、通用命令",[28,1892,1895],{"className":1893,"code":1894,"language":1495,"meta":34},[1493],"KEYS pattern    #查找所有符合给定模式(pattern)的key\nEXISTS key      #检查给定key是否存在\nTYPE key        #返回key所存储的值的类型\nDEL key         #该命令用于在key存在是删除key\n",[36,1896,1894],{"__ignoreMap":34},[15,1898,1900],{"id":1899},"sping-data-redis","Sping Data Redis",[19,1902,1903],{},"Sping Data Redis是Spring的一部分，对Redis底层开发包进行了高度封装",[23,1905,1907],{"id":1906},"spring-data-redis-使用方式","Spring Data Redis 使用方式",[19,1909,1910,1913],{},[179,1911,1912],{},"操作步骤","：",[284,1915,1916,1919,1922,1925],{},[287,1917,1918],{},"导入 Spring Data Redis 的 maven 坐标",[287,1920,1921],{},"配置 Redis 数据源",[287,1923,1924],{},"编写配置类，创建 RedisTemplate 对象",[287,1926,1927],{},"通过 RedisTemplate 对象操作 Redis",[10,1929,1931],{"id":1930},"day06","Day06",[15,1933,1935],{"id":1934},"httpclient","HttpClient",[19,1937,1938],{},"HttpClient是ApacheJakartaCommon下的子项目，可以用来提供高效的、最新的、功能丰富的支持HTTP协议\n的客户端编程工具包，并且它支持HTTP协议最新的版本和建议。",[15,1940,1941],{"id":1941},"微信小程序",[19,1943,1944],{},"小程序包含一个描述整体程序的 app 和多个描述各自页面的 page。一个小程序主体部分由三个文件组成，必须放在项目的根目录，如下:",[42,1946,1947,1959],{},[45,1948,1949],{},[48,1950,1951,1954,1957],{},[51,1952,1953],{},"文件",[51,1955,1956],{},"必需",[51,1958,683],{},[58,1960,1961,1972,1982],{},[48,1962,1963,1966,1969],{},[63,1964,1965],{},"app.js",[63,1967,1968],{},"是",[63,1970,1971],{},"小程序逻辑",[48,1973,1974,1977,1979],{},[63,1975,1976],{},"app.json",[63,1978,1968],{},[63,1980,1981],{},"小程序公共配置",[48,1983,1984,1987,1990],{},[63,1985,1986],{},"app.wxss",[63,1988,1989],{},"否",[63,1991,1992],{},"小程序公共样式表",[19,1994,1995],{},[179,1996,1997],{},"一个小程序页面由四个文件组成：",[42,1999,2000,2011],{},[45,2001,2002],{},[48,2003,2004,2007,2009],{},[51,2005,2006],{},"文件类型",[51,2008,1956],{},[51,2010,683],{},[58,2012,2013,2023,2033,2043],{},[48,2014,2015,2018,2020],{},[63,2016,2017],{},"js",[63,2019,1968],{},[63,2021,2022],{},"页面逻辑",[48,2024,2025,2028,2030],{},[63,2026,2027],{},"wxml",[63,2029,1968],{},[63,2031,2032],{},"页面结构",[48,2034,2035,2038,2040],{},[63,2036,2037],{},"json",[63,2039,1989],{},[63,2041,2042],{},"页面配置",[48,2044,2045,2048,2050],{},[63,2046,2047],{},"wxss",[63,2049,1989],{},[63,2051,2052],{},"页面样式表",[184,2054],{":caption":186,"src":2055},"https://7.isyangs.cn/20250809/740e7dc2dd34e8b43491c73e5d354f60.png",[10,2057,2059],{"id":2058},"day07","Day07",[15,2061,2062],{"id":2062},"缓存菜品",[19,2064,2065],{},"通过Redis来缓存菜品数据，减少数据库查询操作。",[184,2067],{":caption":186,"src":2068},"https://7.isyangs.cn/20250809/d29d98d89a8848e638f9b51c825b9a9f.png",[19,2070,2071],{},[179,2072,2073],{},"缓存逻辑：",[19,2075,2076],{},[179,2077,2078],{},"缓存逻辑分析：",[293,2080,2081,2084],{},[287,2082,2083],{},"每个分类下的菜品保存一份缓存数据",[287,2085,2086],{},"数据库中菜品数据有变更时清理缓存数据",[42,2088,2089,2097],{},[45,2090,2091],{},[48,2092,2093,2095],{},[51,2094,1266],{},[51,2096,1269],{},[58,2098,2099,2107,2114],{},[48,2100,2101,2104],{},[63,2102,2103],{},"dish_1",[63,2105,2106],{},"string(...)",[48,2108,2109,2112],{},[63,2110,2111],{},"dish_2",[63,2113,2106],{},[48,2115,2116,2119],{},[63,2117,2118],{},"dish_3",[63,2120,2106],{},[19,2122,2123],{},"修改管理端接口 DishController 的相关方法，加入清理缓存的逻辑，需要改造的方法：",[293,2125,2126,2129,2132,2135],{},[287,2127,2128],{},"新增菜品",[287,2130,2131],{},"修改菜品",[287,2133,2134],{},"批量删除菜品",[287,2136,2137],{},"起售、停售菜品",[23,2139,2141],{"id":2140},"一些问题停售还能查到菜品","一些问题(停售还能查到菜品)：",[19,2143,2144,2147,2148,182],{},[179,2145,2146],{},"停售","之后，用户端还能",[179,2149,2150],{},"看到菜品",[184,2152],{":caption":186,"src":2153},"https://7.isyangs.cn/20250809/3e4b09400f1662c6dc5c5f5195a72309.png",[19,2155,2156],{},"经过代码查看，发现原来写的时候只是修改状态，没做相应的判断。",[184,2158],{":caption":186,"src":2159},"https://7.isyangs.cn/20250809/bfd1e5292c54e97b70ecdf3533ddf22d.png",[19,2161,2162,2163,1227],{},"修改如下：(来自",[179,2164,2165],{},"黑马资料",[23,2167,2169],{"id":2168},"_523-setmealserviceimpl","5.2.3 SetmealServiceImpl",[28,2171,2174],{"className":2172,"code":2173,"language":394,"meta":34},[392],"/**\n     * 套餐起售、停售\n     * @param status\n     * @param id\n*/\npublic void startOrStop(Integer status, Long id) {\n    //起售套餐时，判断套餐内是否有停售菜品，有停售菜品提示\"套餐内包含未启售菜品，无法启售\"\n    if(status == StatusConstant.ENABLE){\n        //select a.* from dish a left join setmeal_dish b on a.id = b.dish_id where b.setmeal_id = ?\n        List\u003CDish> dishList = dishMapper.getBySetmealId(id);\n        if(dishList != null && dishList.size() > 0){\n            dishList.forEach(dish -> {\n                if(StatusConstant.DISABLE == dish.getStatus()){\n                    throw new SetmealEnableFailedException(MessageConstant.SETMEAL_ENABLE_FAILED);\n                }\n            });\n        }\n    }\n\n    Setmeal setmeal = Setmeal.builder()\n        .id(id)\n        .status(status)\n        .build();\n    setmealMapper.update(setmeal);\n}\n",[36,2175,2173],{"__ignoreMap":34},[23,2177,2179],{"id":2178},"_524-dishmapper","5.2.4 DishMapper",[28,2181,2184],{"className":2182,"code":2183,"language":394,"meta":34},[392],"/**\n     * 根据套餐id查询菜品\n     * @param setmealId\n     * @return\n*/\n@Select(\"select a.* from dish a left join setmeal_dish b on a.id = b.dish_id where b.setmeal_id = #{setmealId}\")\nList\u003CDish> getBySetmealId(Long setmealId);\n",[36,2185,2183],{"__ignoreMap":34},[23,2187,2189],{"id":2188},"正确修改方法","正确修改方法！！：",[19,2191,2192,2193,2196,2197,204,2200,2203],{},"我以为是没考虑上面的停售起售逻辑，但是通过控制台请求发现，status为0的也被查到了，因此我判断是",[179,2194,2195],{},"数据库的查询","出了问题，如下图所示，我查询的时候只",[179,2198,2199],{},"根据了种类id",[179,2201,2202],{},"没有加售卖状态","，因此导致全查到了。",[184,2205],{":caption":186,"src":2206},"https://7.isyangs.cn/20250809/52d8daa45a16ce7e7774db558c0f1753.png",[19,2208,2209],{},"修改如下即可：",[184,2211],{":caption":186,"src":2212},"https://7.isyangs.cn/20250809/dbf7b3f4bd2b8171f695462369b48ffa.png",[19,2214,2215],{},"这时即可正常进行查询：",[184,2217],{":caption":186,"src":2218},"https://7.isyangs.cn/20250809/687a122880b4d2a064996ba1e14c18d1.png",[15,2220,2221],{"id":2221},"缓存套餐",[23,2223,2225],{"id":2224},"spring-cache","Spring Cache",[19,2227,2228,2229,2231],{},"Spring Cache 是一个框架，实现了基于",[179,2230,127],{},"的缓存功能，只需要简单地加一个注解，就能实现缓存功能。",[19,2233,2234],{},"Spring Cache 提供了一层抽象，底层可以切换不同的缓存实现，例如：",[293,2236,2237,2240,2243],{},[287,2238,2239],{},"EHCache",[287,2241,2242],{},"Caffeine",[287,2244,2245],{},"Redis",[19,2247,2248],{},"Spring Cache 常用注解如下：",[42,2250,2251,2259],{},[45,2252,2253],{},[48,2254,2255,2257],{},[51,2256,127],{},[51,2258,56],{},[58,2260,2261,2269,2277,2285],{},[48,2262,2263,2266],{},[63,2264,2265],{},"@EnableCaching",[63,2267,2268],{},"开启缓存注解功能，通常添加在启动类上。",[48,2270,2271,2274],{},[63,2272,2273],{},"@Cacheable",[63,2275,2276],{},"方法执行前先查询缓存，若有数据则直接返回缓存数据；若无缓存数据，调用方法并将返回值存入缓存。",[48,2278,2279,2282],{},[63,2280,2281],{},"@CachePut",[63,2283,2284],{},"将方法的返回值存入缓存中。",[48,2286,2287,2290],{},[63,2288,2289],{},"@CacheEvict",[63,2291,2292],{},"从缓存中删除一条或多条数据。",[28,2294,2297],{"className":2295,"code":2296,"language":394,"meta":34},[392],"@CachePut(cacheNames = \"userCache\",key = \"#user.id\") //如果使用springcache缓存数据，key的生成；usercache：xxxx\n    public User save(@RequestBody User user){\n        userMapper.insert(user);\n        return user;\n    }\n",[36,2298,2296],{"__ignoreMap":34},[19,2300,2301,2302],{},"​\t",[179,2303,2304],{},[36,2305,2306],{"code":2306},"cacheNames = \"userCache\"",[293,2308,2309,2319],{},[287,2310,2311,2312,2315,2316,2318],{},"这个 ",[36,2313,2314],{"code":2314},"cacheNames","（或 ",[36,2317,1269],{"code":1269},"）定义了缓存的名称，类似于一个“缓存的空间”。",[287,2320,2321,2322,2324],{},"在不同的地方，如果使用相同的 ",[36,2323,2314],{"code":2314},"，就可以访问相同的缓存数据。",[28,2326,2329],{"className":2327,"code":2328,"language":394,"meta":34},[392],"@DeleteMapping(\"/delAll\")  //删除所有数据\n    @CacheEvict(cacheNames = \"userCache\",allEntries = true)\n    public void deleteAll(){\n        userMapper.deleteAll();\n    }\n\n    @GetMapping\n    @Cacheable(cacheNames = \"userCache\",key = \"#id\") //清理一条数据\n    public User getById(Long id){\n        User user = userMapper.getById(id);\n        return user;\n    }\n",[36,2330,2328],{"__ignoreMap":34},[10,2332,2334],{"id":2333},"day08","Day08",[15,2336,2337],{"id":2337},"订单支付",[184,2339],{":caption":186,"src":2340},"https://7.isyangs.cn/20250809/dadd359f908aeeeef73017f4361bc3e1.png",[19,2342,2343],{},"通过该命令获得临时的公网IP",[28,2345,2348],{"className":2346,"code":2347,"language":274,"meta":34},[272],"import org.springframework.beans.factory.annotation.Value;\n",[36,2349,2347],{"__ignoreMap":34},[15,2351,2352],{"id":2352},"跳过支付",[19,2354,2355],{},"主要参考这个大佬的笔记：",[19,2357,2358],{},[96,2359,2362],{"href":2360,"rel":2361},"https://www.bilibili.com/h5/note-app/view?cvid=25087721&pagefrom=comment&richtext=true",[100],"笔记",[10,2364,2366],{"id":2365},"day10","Day10",[15,2368,2370],{"id":2369},"spring-task","Spring Task",[19,2372,2373],{},"Spring Task是Spring框架提供的任务调度工具，可以按照约定的时间自动执行某个代码逻辑",[19,2375,1353],{},[293,2377,2378,2381,2384],{},[287,2379,2380],{},"信用卡每月还款提醒",[287,2382,2383],{},"银行贷款每月还款提醒",[287,2385,2386],{},"火车票售票系统处理未支付订单",[19,2388,2389],{},"定时处理的场景都可以使用Spring Task",[23,2391,2392],{"id":2392},"cron表达式",[19,2394,2395],{},"cron表达式其实就是一个字符串，通过cron表达式可以定义任务触发的时间",[19,2397,2398],{},"构成规则：分为6或7个域，由空格分隔开，每个域代表一个含义",[19,2400,2401],{},"每个域的含义分别为：秒、分钟、小时、日、月、周、年(可选)",[15,2403,2405],{"id":2404},"websocket","WebSocket",[19,2407,2408,2409,2412,2413,2416,2417,2420],{},"WebSocket 是基于 TCP 的一种新的",[179,2410,2411],{},"网络协议","。它实现了浏览器与服务器全双工通信--浏览器和服务器只需要完成并进行双向数据传输。一次握手，两者之间就可以创建",[179,2414,2415],{},"持久性","的连接，并进行",[179,2418,2419],{},"双向","数据传输。",[19,2422,2423],{},"应用场景：\n• 视频弹幕\n• 网页聊天\n• 体育实况更新\n• 股票基金报价实时更新",[19,2425,2426],{},"实现步骤：",[284,2428,2429,2434,2439,2444,2449],{},[287,2430,2431],{},[179,2432,2433],{},"直接使用WebSocket.html页面作为WebSocket客户端",[287,2435,2436,1913],{},[179,2437,2438],{},"导入WebSocket的Maven坐标",[287,2440,2441,1913],{},[179,2442,2443],{},"导入WebSocket服务端组件WebSocketServer，用于和客户端通信",[287,2445,2446],{},[179,2447,2448],{},"导入配置类WebSocketConfiguration，注册WebSocket的服务端组件",[287,2450,2451],{},[179,2452,2453],{},"导入定时任务类WebSocketTask，定时向客户端推送数据",[293,2455,2456,2459,2462,2465],{},[287,2457,2458],{},"通过WebSocket实现管理端页面和服务端保持长连接状态",[287,2460,2461],{},"当客户支付后，调用WebSocket的相关API实现服务端向客户端推送消息",[287,2463,2464],{},"客户端浏览器解析服务端推送的消息，判断是来单提醒还是客户催单，进行相应的消息提示和语音播报",[287,2466,2467],{},"约定服务端发送给客户端浏览器的数据格式为JSON，字段包括：type、orderId、content",{"title":34,"searchDepth":2469,"depth":2469,"links":2470},4,[2471,2482,2499,2509,2513,2537,2541,2552,2556],{"id":12,"depth":2472,"text":13,"children":2473},2,[2474,2478],{"id":17,"depth":2475,"text":17,"children":2476},3,[2477],{"id":25,"depth":2469,"text":26},{"id":87,"depth":2475,"text":88,"children":2479},[2480,2481],{"id":106,"depth":2469,"text":106},{"id":118,"depth":2469,"text":118},{"id":166,"depth":2472,"text":167,"children":2483},[2484,2488,2492,2493,2494],{"id":170,"depth":2475,"text":171,"children":2485},[2486,2487],{"id":174,"depth":2469,"text":174},{"id":230,"depth":2469,"text":231},{"id":249,"depth":2475,"text":250,"children":2489},[2490,2491],{"id":256,"depth":2469,"text":257},{"id":279,"depth":2469,"text":282},{"id":366,"depth":2475,"text":367},{"id":376,"depth":2475,"text":376},{"id":399,"depth":2475,"text":399,"children":2495},[2496,2497,2498],{"id":429,"depth":2469,"text":430},{"id":496,"depth":2469,"text":497},{"id":525,"depth":2469,"text":526},{"id":614,"depth":2472,"text":615,"children":2500},[2501,2502,2503,2504,2505,2506,2507,2508],{"id":618,"depth":2469,"text":619},{"id":628,"depth":2469,"text":629},{"id":657,"depth":2469,"text":658},{"id":857,"depth":2469,"text":858},{"id":884,"depth":2469,"text":885},{"id":1028,"depth":2469,"text":1029},{"id":1052,"depth":2469,"text":1053},{"id":1111,"depth":2469,"text":1112},{"id":1118,"depth":2472,"text":1119,"children":2510},[2511,2512],{"id":1125,"depth":2469,"text":1125},{"id":1137,"depth":2469,"text":1137},{"id":1245,"depth":2472,"text":1246,"children":2514},[2515,2534],{"id":1249,"depth":2475,"text":1250,"children":2516},[2517,2526],{"id":1297,"depth":2469,"text":1298,"children":2518},[2519,2521,2522,2523,2524,2525],{"id":1319,"depth":2520,"text":1322},5,{"id":1390,"depth":2520,"text":1393},{"id":1457,"depth":2520,"text":1460},{"id":1532,"depth":2520,"text":1535},{"id":1606,"depth":2520,"text":1609},{"id":1680,"depth":2520,"text":1680},{"id":1795,"depth":2469,"text":1796,"children":2527},[2528,2529,2530,2531,2532,2533],{"id":1799,"depth":2520,"text":1322},{"id":1814,"depth":2520,"text":1393},{"id":1832,"depth":2520,"text":1460},{"id":1850,"depth":2520,"text":1535},{"id":1868,"depth":2520,"text":1609},{"id":1889,"depth":2520,"text":1890},{"id":1899,"depth":2475,"text":1900,"children":2535},[2536],{"id":1906,"depth":2469,"text":1907},{"id":1930,"depth":2472,"text":1931,"children":2538},[2539,2540],{"id":1934,"depth":2475,"text":1935},{"id":1941,"depth":2475,"text":1941},{"id":2058,"depth":2472,"text":2059,"children":2542},[2543,2549],{"id":2062,"depth":2475,"text":2062,"children":2544},[2545,2546,2547,2548],{"id":2140,"depth":2469,"text":2141},{"id":2168,"depth":2469,"text":2169},{"id":2178,"depth":2469,"text":2179},{"id":2188,"depth":2469,"text":2189},{"id":2221,"depth":2475,"text":2221,"children":2550},[2551],{"id":2224,"depth":2469,"text":2225},{"id":2333,"depth":2472,"text":2334,"children":2553},[2554,2555],{"id":2337,"depth":2475,"text":2337},{"id":2352,"depth":2475,"text":2352},{"id":2365,"depth":2472,"text":2366,"children":2557},[2558,2561],{"id":2369,"depth":2475,"text":2370,"children":2559},[2560],{"id":2392,"depth":2469,"text":2392},{"id":2404,"depth":2475,"text":2405},[2563],"实战项目","2025-03-18 21:24:59","记录“Java苍穹外卖”实战项目开发过程，涵盖环境搭建与配置，如nginx反向代理、Swagger使用；功能开发细节，包括JWT认证、日期处理等；还涉及Redis缓存、Spring Task、WebSocket等技术应用，以及菜品管理、订单支付等功能实现。",false,"md","https://7.isyangs.cn/20250809/22d30d32d7e2785b86b71a9f0a0c38c5.png",{},true,"/2025/sky_takeaway",{"text":2573,"minutes":2574,"time":2575,"words":2576},"30 min read",29.15,1749000,5830,null,{"title":5,"description":2565},{"loc":2571},"posts/2025/Sky_takeaway",[2582,2583],"Java","后端","AU6k0XDl2xl7U46zCERY1kh5jJMz_fhsHKmrQLnWCNY",[2577,2586],{"title":2587,"path":2588,"stem":2589,"date":2590,"type":2577,"children":-1},"2025蓝桥杯突击训练","/2025/lanqiao2025","posts/2025/lanqiao2025","2025-03-27 23:45:35",1758977468536]