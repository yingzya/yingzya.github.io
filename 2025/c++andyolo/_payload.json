[{"data":1,"prerenderedAt":623},["ShallowReactive",2],{"/2025/c++andyolo":3,"surround-/2025/c++andyolo":612},{"id":4,"title":5,"body":6,"categories":591,"date":593,"description":594,"draft":595,"extension":596,"image":597,"meta":598,"navigation":599,"path":600,"readingTime":601,"recommend":597,"references":597,"seo":606,"sitemap":607,"stem":608,"tags":609,"type":597,"updated":593,"url":597,"__hash__":611},"content/posts/2025/c++andyolo.md","C++面向对象与YOLO目标检测",{"type":7,"value":8,"toc":574},"minimark",[9,14,19,28,31,46,49,56,59,79,86,92,98,101,111,114,117,120,127,137,142,148,151,157,176,179,193,199,205,211,217,220,223,242,245,252,264,270,274,289,295,310,316,331,337,349,355,363,369,377,451,455,472,479,482,487,507,511,527,534,537,541],[10,11,13],"h2",{"id":12},"c面向对象","C++面向对象",[15,16,18],"h3",{"id":17},"类-对象","类 & 对象",[20,21,22,23,27],"p",{},"定义一个类需要使用关键字 ",[24,25,26],"strong",{},"class","，然后指定类的名称，并类的主体是包含在一对花括号中，主体包含类的成员变量和成员函数。",[20,29,30],{},"定义一个类，本质上是定义一个数据类型的蓝图，它定义了类的对象包括了什么，以及可以在这个对象上执行哪些操作。",[20,32,33,34,37,38,41,42,45],{},"类内有访问修饰符：关键字 ",[24,35,36],{},"public"," 确定了类成员的访问属性。在类对象作用域内，公共成员在类的外部是可访问的。您也可以指定类的成员为 ",[24,39,40],{},"private"," 或 ",[24,43,44],{},"protected","。",[15,47,48],{"id":48},"封装",[20,50,51,52,55],{},"封装是 ",[24,53,54],{},"数据隐藏"," 的体现，限制外部直接访问对象的内部状态，只能通过接口操作。",[20,57,58],{},"使用访问修饰符：",[60,61,62,69,74],"ul",{},[63,64,65,68],"li",{},[66,67,36],"code",{"code":36},"：公开的，类外可访问。",[63,70,71,73],{},[66,72,40],{"code":40},"：私有的，仅类内可访问（默认）。",[63,75,76,78],{},[66,77,44],{"code":44},"：受保护的，类内和子类可访问。",[20,80,81,82,85],{},"静态成员（",[24,83,84],{},"static","）",[20,87,88,91],{},[24,89,90],{},"静态成员变量","：属于类而不是某个对象，所有对象共享一份。",[20,93,94,97],{},[24,95,96],{},"静态成员函数","：不依赖具体对象调用，不能访问非静态成员。",[15,99,100],{"id":100},"继承",[20,102,103,104,107,108],{},"当创建一个类时，不需要重新编写新的数据成员和成员函数，只需指定新建的类继承了一个已有的类的成员即可。这个已有的类称为",[24,105,106],{},"基类","，新建的类称为",[24,109,110],{},"派生类",[15,112,113],{"id":113},"类的指针",[20,115,116],{},"不考虑继承，类指针与结构体指针类似",[20,118,119],{},"讲真正多态前必须先讲类指针",[60,121,122,125],{},[63,123,124],{},"实际程序中，大量使用类指针",[63,126,116],{},[128,129,135],"pre",{"className":130,"code":132,"language":133,"meta":134},[131],"language-c++","student *p; //新建一个student类指针\nstudent aa; //新建aa对象\np = &aa; //p指针指向aa对象\np -> name; //这个就和aa.name一样，返回aa的name值\np -> study(); //这个相当于aa.study()，对aa执行成员函数\n","c++","",[66,136,132],{"__ignoreMap":134},[60,138,139],{},[63,140,141],{},"实际程序中使用更高级写法：",[128,143,146],{"className":144,"code":145,"language":133,"meta":134},[131],"student *p = new student(20, '张三'); \ndelete p; //调用析构函数\n",[66,147,145],{"__ignoreMap":134},[20,149,150],{},"把继承考虑进去，复杂一点：\n类定义省略，且只考虑公有继承",[128,152,155],{"className":153,"code":154,"language":133,"meta":134},[131],"student *p1;//新建一个student父类指针\npostgraduate *p2;//新建一个postgraduate子类指针\nstudent aa; // 新建父类对象 aa\npostgraduate bb;// 新建子类对象 bb\np1 = &aa; // 父类指针指向父类对象，可以\np2 = &bb; // 子类指针指向子类对象，也可以\np1 = &bb; // 父类学生指针指向子类研究生对象，可以\np2 = &aa; // 子类研究生指针指向父类学生对象，这里报错\n",[66,156,154],{"__ignoreMap":134},[60,158,159],{},[63,160,161,162],{},"父类指针是可以指向子类成员\n",[60,163,164,167,170,173],{},[63,165,166],{},"因为研究生一定是学生的一种",[63,168,169],{},"反过来则不行，学生可不一定都是研究生",[63,171,172],{},"但 p1 -> research 会报错",[63,174,175],{},"虽然父指针指向了 postgraduate，但不能调用 postgraduate 中的属性和方法，父类指针指向子类时，仍然只能用父类中的方法。",[15,177,178],{"id":178},"多态",[20,180,181,184,185,188,189,192],{},[24,182,183],{},"虚函数","：\n在基类中声明一个函数为虚函数，使用关键字",[24,186,187],{},"virtual","。派生类可以重写（",[24,190,191],{},"override","）这个虚函数",[20,194,195,198],{},[24,196,197],{},"静态多态（编译时多态）","：函数重载、运算符重载。",[20,200,201,204],{},[24,202,203],{},"动态多态（运行时多态）","：通过虚函数实现。",[128,206,209],{"className":207,"code":208,"language":133,"meta":134},[131],"class Animal {\npublic:\n    virtual void speak() { cout \u003C\u003C \"Animal sound\" \u003C\u003C endl; }\n};\nclass Dog : public Animal {\npublic:\n    void speak() override { cout \u003C\u003C \"Woof!\" \u003C\u003C endl; }\n};\n",[66,210,208],{"__ignoreMap":134},[20,212,213,216],{},[24,214,215],{},"隐藏","：",[20,218,219],{},"在父类student和子类postgraduate中都定义一个函数study()，输入参数格式相同不同都可以。",[15,221,222],{"id":222},"重载运算符和重载函数",[20,224,225,226,229,230,233,234,237,238,241],{},"成员函数的重载：",[24,227,228],{},"不同函数","可以有",[24,231,232],{},"相同","的函数名，通过",[24,235,236],{},"不同","的",[24,239,240],{},"输入参数","来识别。",[20,243,244],{},"重载声明是指一个与之前已经在该作用域内声明过的函数或方法具有相同名称的声明，但是它们的参数列表和定义（实现）不相同。",[20,246,247,248,251],{},"重载的",[24,249,250],{},"运算符","是带有特殊名称的函数，函数名是由关键字 operator 和其后要重载的运算符符号构成的。与其他函数一样，重载运算符有一个返回类型和一个参数列表。",[20,253,254,256,257,237,260,263],{},[24,255,215],{},"和",[24,258,259],{},"覆盖",[24,261,262],{},"同名函数","的参数可以完全一样",[128,265,268],{"className":266,"code":267,"language":133,"meta":134},[131],"class student//类定义，没写全，为了突出重点省略了构造函数和属性\n{\npublic:\n    void study (bool a) {cout\u003C\u003C\" 好好学习\";};\n};\n\nclass postgraduate : public student//类定义，没写全，为了突出重点省略了构造函数和属性\n{\npublic:\n    void study (int b) {cout\u003C\u003C\" 芯片设计\";};\n};\n\n//下面是主函数\npostgraduate bb;//子类对象\nstudent aa;//父类对象\n\nbb. study(2);  //研究生对象调用研究生的study方法，参数为int，打印出芯片设计\naa. study( true );    //学生对象调用学生的study方法，参数为bool，打印出好好学习\nbb. study( true );    //这行出错，研究生对象，但参数为bool，本来应该重载父类的study方法，因为这时父类方法被隐藏了，系统找不到对应的方法，这就是隐藏和重载的区别\n",[66,269,267],{"__ignoreMap":134},[10,271,273],{"id":272},"yolo","YOLO",[20,275,276,277,280,281,284,285,288],{},"YOLO（You Only Look Once）是 ",[24,278,279],{},"单阶段目标检测算法","，它直接将目标检测看作一个 ",[24,282,283],{},"回归问题","，一次前向传播即可同时预测 ",[24,286,287],{},"类别 + 位置","，相比传统方法和两阶段方法有明显优势：",[20,290,291,292],{},"(1) ",[24,293,294],{},"实时性强",[60,296,297,303],{},[63,298,299,300,45],{},"YOLO 系列的设计目标就是 ",[24,301,302],{},"实时目标检测",[63,304,305,306,309],{},"在 GPU 上，可以轻松达到 ",[24,307,308],{},"几十甚至上百帧/秒","，非常适合实时车牌检测。",[20,311,312,313],{},"(2) ",[24,314,315],{},"检测小目标能力强",[60,317,318,321,328],{},[63,319,320],{},"车牌往往是小目标。",[63,322,323,324,327],{},"YOLOv5 以后引入 ",[24,325,326],{},"多尺度特征融合（FPN + PAN）","，提升了对小目标的检测效果。",[63,329,330],{},"YOLOv8/YOLOv10 在 backbone 和 head 上也针对小目标做了优化。",[20,332,333,334],{},"(3) ",[24,335,336],{},"端到端，部署方便",[60,338,339,346],{},[63,340,341,342,345],{},"YOLO 模型结构简洁，预测快，支持 ",[24,343,344],{},"ONNX、TensorRT、NCNN"," 等格式。",[63,347,348],{},"在嵌入式设备（如 Jetson Nano、海思芯片）上也能高效运行，非常适合车牌识别系统的实际部署。",[20,350,351,352],{},"(4) ",[24,353,354],{},"精度和速度平衡",[60,356,357,360],{},[63,358,359],{},"YOLO 在 mAP（准确率指标）和 FPS（速度指标）之间平衡得很好。",[63,361,362],{},"比如：YOLOv5s、YOLOv8n 在保持较高准确率的同时，体积小，速度快，适合前端设备。",[20,364,365,366],{},"(5) ",[24,367,368],{},"社区生态好",[60,370,371,374],{},[63,372,373],{},"YOLO 系列开源度高，代码成熟，社区资源丰富。",[63,375,376],{},"车牌检测的很多开源项目、论文都基于 YOLO 改进，复用性强。",[378,379,380,396],"table",{},[381,382,383],"thead",{},[384,385,386,390,393],"tr",{},[387,388,389],"th",{},"方法",[387,391,392],{},"优点",[387,394,395],{},"缺点",[397,398,399,413,426,439],"tbody",{},[384,400,401,407,410],{},[402,403,404],"td",{},[24,405,406],{},"传统方法 (Haar, HOG+SVM, MSER)",[402,408,409],{},"简单，不依赖大数据",[402,411,412],{},"对光照、角度、模糊敏感，准确率低",[384,414,415,420,423],{},[402,416,417],{},[24,418,419],{},"两阶段检测 (Faster R-CNN)",[402,421,422],{},"准确率高",[402,424,425],{},"推理速度慢，不适合实时场景",[384,427,428,433,436],{},[402,429,430],{},[24,431,432],{},"SSD",[402,434,435],{},"单阶段，速度快",[402,437,438],{},"小目标检测效果不如 YOLO",[384,440,441,445,448],{},[402,442,443],{},[24,444,273],{},[402,446,447],{},"实时性好，小目标优化好，部署方便",[402,449,450],{},"对极端遮挡、超小目标仍有挑战",[15,452,454],{"id":453},"cnn卷积神经网络","CNN（卷积神经网络）",[20,456,457,460,461,464,465,468,469,45],{},[24,458,459],{},"CNN"," 的全称是 ",[24,462,463],{},"Convolutional Neural Network","，中文是",[24,466,467],{},"卷积神经网络","。它是一种深度学习模型，最常用于处理",[24,470,471],{},"图像和视频数据",[20,473,474,475,478],{},"“卷积”这个名字来源于它使用的数学运算——",[24,476,477],{},"卷积","。简单来说，CNN 通过一种叫做“滤波器”（filter）或“卷积核”（kernel）的小窗口在输入数据（比如一张图片）上滑动，来提取各种特征。",[20,480,481],{},"你可以把这个过程想象成：CNN 会先学习识别一些最简单的特征，比如边缘和曲线；然后它会把这些简单的特征组合起来，识别更复杂的特征，比如鼻子或眼睛；最后，它会把这些复杂特征组合起来，识别出完整的物体，比如一张脸。",[20,483,484],{},[24,485,486],{},"常见应用：",[60,488,489,495,501],{},[63,490,491,494],{},[24,492,493],{},"图像分类："," 判断图片里有什么东西（比如猫、狗、汽车）。",[63,496,497,500],{},[24,498,499],{},"物体检测："," 在图片中找到并识别出多个物体的位置。",[63,502,503,506],{},[24,504,505],{},"人脸识别："," 识别特定的人脸。",[15,508,510],{"id":509},"rnn循环神经网络","RNN（循环神经网络）",[20,512,513,460,516,464,519,522,523,526],{},[24,514,515],{},"RNN",[24,517,518],{},"Recurrent Neural Network",[24,520,521],{},"循环神经网络","。与 CNN 不同，RNN 专门用来处理",[24,524,525],{},"序列数据","，即数据的顺序很重要。",[20,528,529,530,533],{},"RNN 最核心的特点是它的“",[24,531,532],{},"记忆","”功能。它会一步步地处理输入序列，在处理每一步时，都会利用上一步的输出作为当前步的输入。这使得 RNN 能够捕获序列中的依赖关系和上下文信息。",[20,535,536],{},"一个简单的比喻就是我们阅读一句话。当我们读到“苹果”这个词时，我们能理解它的含义是因为我们记住了前面出现的词。RNN 的工作方式很类似，它利用内部状态（也就是它的“记忆”）来追踪序列中之前的信息。",[20,538,539],{},[24,540,486],{},[60,542,543,562,568],{},[63,544,545,548],{},[24,546,547],{},"自然语言处理 (NLP)：",[60,549,550,556],{},[63,551,552,555],{},[24,553,554],{},"机器翻译："," 把一种语言的文本翻译成另一种语言。",[63,557,558,561],{},[24,559,560],{},"文本生成："," 创作新的句子或段落。",[63,563,564,567],{},[24,565,566],{},"语音识别："," 把口语转换成文字。",[63,569,570,573],{},[24,571,572],{},"时间序列分析："," 根据过去的数据预测未来的数值（比如股票价格）。",{"title":134,"searchDepth":575,"depth":575,"links":576},4,[577,587],{"id":12,"depth":578,"text":13,"children":579},2,[580,582,583,584,585,586],{"id":17,"depth":581,"text":18},3,{"id":48,"depth":581,"text":48},{"id":100,"depth":581,"text":100},{"id":113,"depth":581,"text":113},{"id":178,"depth":581,"text":178},{"id":222,"depth":581,"text":222},{"id":272,"depth":578,"text":273,"children":588},[589,590],{"id":453,"depth":581,"text":454},{"id":509,"depth":581,"text":510},[592],"复习","2025-09-07 18:48:51","C++面向对象涵盖封装、继承、多态，支持运算符重载与隐藏；YOLO单阶段检测高效实时，擅长小目标识别，部署便捷。",false,"md",null,{},true,"/2025/c++andyolo",{"text":602,"minutes":603,"time":604,"words":605},"12 min read",11.335,680100,2267,{"title":5,"description":594},{"loc":600},"posts/2025/c++andyolo",[610,273],"C++","r-HD0FDbLj8craRPUZMi00mM-u6DY3TaZU7_yMJYXYQ",[613,618],{"title":614,"path":615,"stem":616,"date":617,"type":597,"children":-1},"力扣Hot100","/2025/lkhot100","posts/2025/lkhot100","2025-08-22 10:15:04",{"title":619,"path":620,"stem":621,"date":622,"type":597,"children":-1},"B树与B+树","/2025/b+_tree","posts/2025/B+_tree","2025-09-15 20:00:06",1758978953362]